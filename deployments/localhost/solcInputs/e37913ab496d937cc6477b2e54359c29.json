{
  "language": "Solidity",
  "sources": {
    "contracts/actions/AaveDeposit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '../../interfaces/IAToken.sol';\nimport '../../interfaces/ILendingPool.sol';\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/actions/IAaveDeposit.sol';\nimport '../utils/Storage.sol';\n\n///@notice action to deposit tokens into aave protocol\ncontract AaveDeposit is IAaveDeposit {\n    ///@notice emitted when a deposit on aave is made\n    ///@param positionManager address of aave positionManager which deposited\n    ///@param token token address\n    ///@param id aave position id\n    ///@param shares shares emitted\n    event DepositedOnAave(address indexed positionManager, address token, uint256 id, uint256 shares);\n\n    ///@notice deposit to aave some token amount\n    ///@param token token address\n    ///@param amount amount to deposit\n    ///@return id of the deposited position\n    ///@return shares emitted\n    function depositToAave(address token, uint256 amount) public override returns (uint256 id, uint256 shares) {\n        ILendingPool lendingPool = ILendingPool(\n            PositionManagerStorage.getStorage().aaveAddressHolder.lendingPoolAddress()\n        );\n\n        require(\n            lendingPool.getReserveData(token).aTokenAddress != address(0),\n            'AaveDeposit::depositToAave: Aave token not found.'\n        );\n\n        IAToken aToken = IAToken(lendingPool.getReserveData(token).aTokenAddress);\n\n        uint256 balanceBefore = aToken.scaledBalanceOf(address(this));\n\n        if (IERC20(token).allowance(address(this), address(lendingPool)) < amount) {\n            IERC20(token).approve(address(lendingPool), amount);\n        }\n\n        lendingPool.deposit(token, amount, address(this), 0);\n\n        shares = aToken.scaledBalanceOf(address(this)) - balanceBefore;\n\n        id = _updateAavePosition(token, shares);\n        emit DepositedOnAave(address(this), token, id, shares);\n    }\n\n    function _updateAavePosition(address token, uint256 shares) internal returns (uint256) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        Storage.aaveUserReserves[token].positionShares[Storage.aaveIdCounter] = shares;\n        Storage.aaveUserReserves[token].sharesEmitted += shares;\n        Storage.aaveIdCounter++;\n        return Storage.aaveIdCounter - 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "interfaces/IAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\n\ninterface IAToken is IERC20, IScaledBalanceToken {\n    /**\n     * @dev Emitted after the mint action\n     * @param from The address performing the mint\n     * @param value The amount being\n     * @param index The new liquidity index of the reserve\n     **/\n    event Mint(address indexed from, uint256 value, uint256 index);\n\n    /**\n     * @dev Mints `amount` aTokens to `user`\n     * @param user The address receiving the minted tokens\n     * @param amount The amount of tokens getting minted\n     * @param index The new liquidity index of the reserve\n     * @return `true` if the the previous balance of the user was 0\n     */\n    function mint(\n        address user,\n        uint256 amount,\n        uint256 index\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted after aTokens are burned\n     * @param from The owner of the aTokens, getting them burned\n     * @param target The address that will receive the underlying\n     * @param value The amount being burned\n     * @param index The new liquidity index of the reserve\n     **/\n    event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\n\n    /**\n     * @dev Emitted during the transfer action\n     * @param from The user whose tokens are being transferred\n     * @param to The recipient\n     * @param value The amount being transferred\n     * @param index The new liquidity index of the reserve\n     **/\n    event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\n\n    /**\n     * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n     * @param user The owner of the aTokens, getting them burned\n     * @param receiverOfUnderlying The address that will receive the underlying\n     * @param amount The amount being burned\n     * @param index The new liquidity index of the reserve\n     **/\n    function burn(\n        address user,\n        address receiverOfUnderlying,\n        uint256 amount,\n        uint256 index\n    ) external;\n\n    /**\n     * @dev Mints aTokens to the reserve treasury\n     * @param amount The amount of tokens getting minted\n     * @param index The new liquidity index of the reserve\n     */\n    function mintToTreasury(uint256 amount, uint256 index) external;\n\n    /**\n     * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\n     * @param from The address getting liquidated, current owner of the aTokens\n     * @param to The recipient\n     * @param value The amount of tokens getting transferred\n     **/\n    function transferOnLiquidation(\n        address from,\n        address to,\n        uint256 value\n    ) external;\n\n    /**\n     * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\n     * assets in borrow(), withdraw() and flashLoan()\n     * @param user The recipient of the aTokens\n     * @param amount The amount getting transferred\n     * @return The amount transferred\n     **/\n    function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\n}\n"
    },
    "interfaces/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.7.6;\npragma experimental ABIEncoderV2;\n\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\nimport {DataTypes} from './DataTypes.sol';\n\ninterface ILendingPool {\n    /**\n     * @dev Emitted on deposit()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the deposit\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n     * @param amount The amount deposited\n     * @param referral The referral code used\n     **/\n    event Deposit(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlyng asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to Address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     **/\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed\n     * @param referral The referral code used\n     **/\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint256 borrowRateMode,\n        uint256 borrowRate,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     **/\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     **/\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     **/\n    event FlashLoan(\n        address indexed target,\n        address indexed initiator,\n        address indexed asset,\n        uint256 amount,\n        uint256 premium,\n        uint16 referralCode\n    );\n\n    /**\n     * @dev Emitted when the pause is triggered.\n     */\n    event Paused();\n\n    /**\n     * @dev Emitted when the pause is lifted.\n     */\n    event Unpaused();\n\n    /**\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n     * LendingPoolCollateral manager using a DELEGATECALL\n     * This allows to have the events in the generated ABI for LendingPool.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n     * gets added to the LendingPool ABI\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The new liquidity rate\n     * @param stableBorrowRate The new stable borrow rate\n     * @param variableBorrowRate The new variable borrow rate\n     * @param liquidityIndex The new liquidity index\n     * @param variableBorrowIndex The new variable borrow index\n     **/\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to deposit\n     * @param amount The amount to be deposited\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to Address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     **/\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     **/\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 rateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n     * @param asset The address of the underlying asset borrowed\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n    /**\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n     *        borrowed at a stable rate and depositors are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     **/\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n     * @param asset The address of the underlying asset deposited\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n     **/\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n    /**\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n     * For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts amounts being flash-borrowed\n     * @param modes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralETH the total collateral in ETH of the user\n     * @return totalDebtETH the total debt in ETH of the user\n     * @return availableBorrowsETH the borrowing power left of the user\n     * @return currentLiquidationThreshold the liquidation threshold of the user\n     * @return ltv the loan to value of the user\n     * @return healthFactor the current health factor of the user\n     **/\n    function getUserAccountData(address user)\n        external\n        view\n        returns (\n            uint256 totalCollateralETH,\n            uint256 totalDebtETH,\n            uint256 availableBorrowsETH,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    function initReserve(\n        address reserve,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\n\n    function setConfiguration(address reserve, uint256 configuration) external;\n\n    /**\n     * @dev Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     **/\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n     * @dev Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     **/\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n     * @dev Returns the normalized income normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the normalized variable debt per unit of asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state of the reserve\n     **/\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromAfter,\n        uint256 balanceToBefore\n    ) external;\n\n    function getReservesList() external view returns (address[] memory);\n\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\n\n    function setPause(bool val) external;\n\n    function paused() external view returns (bool);\n}\n"
    },
    "interfaces/IPositionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\n\ninterface IPositionManager {\n    struct ModuleInfo {\n        bool isActive;\n        bytes data;\n    }\n\n    struct AaveReserve {\n        mapping(uint256 => uint256) positionShares;\n        mapping(uint256 => uint256) tokenIds;\n        uint256 sharesEmitted;\n    }\n\n    function getModuleState(uint256 tokenId, address moduleAddress) external view returns (bool);\n\n    function toggleModule(\n        uint256 tokenId,\n        address moduleAddress,\n        bool activated\n    ) external;\n\n    function setModuleData(\n        uint256 tokenId,\n        address moduleAddress,\n        bytes memory data\n    ) external;\n\n    function getModuleData(uint256 tokenId, address moduleAddress) external view returns (bytes memory);\n\n    function withdrawERC20(address tokenAddress) external;\n\n    function getAllUniPositions() external view returns (uint256[] memory);\n\n    function pushPositionId(uint256 tokenId) external;\n\n    function removePositionId(uint256 index) external;\n\n    function pushTokenIdToAave(\n        address token,\n        uint256 id,\n        uint256 tokenId\n    ) external;\n\n    function getTokenIdFromAavePosition(address token, uint256 id) external view returns (uint256 tokenId);\n\n    function getOwner() external view returns (address);\n}\n"
    },
    "interfaces/actions/IAaveDeposit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IAaveDeposit {\n    ///@notice deposit to aave some token amount\n    ///@param token token address\n    ///@param amount amount to deposit\n    ///@return id of the deposited position\n    ///@return shares emitted\n    function depositToAave(address token, uint256 amount) external returns (uint256 id, uint256 shares);\n}\n"
    },
    "contracts/utils/Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/IUniswapAddressHolder.sol';\nimport '../../interfaces/IAaveAddressHolder.sol';\nimport '../../interfaces/IDiamondCut.sol';\nimport '../../interfaces/IRegistry.sol';\n\nstruct FacetAddressAndPosition {\n    address facetAddress;\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n}\n\nstruct FacetFunctionSelectors {\n    bytes4[] functionSelectors;\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n}\n\nstruct StorageStruct {\n    // maps function selector to the facet address and\n    // the position of the selector in the facetFunctionSelectors.selectors array\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n    // maps facet addresses to function selectors\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n    // facet addresses\n    address[] facetAddresses;\n    IUniswapAddressHolder uniswapAddressHolder;\n    address owner;\n    IRegistry registry;\n    IAaveAddressHolder aaveAddressHolder;\n    uint256 aaveIdCounter;\n    mapping(address => IPositionManager.AaveReserve) aaveUserReserves;\n}\n\nlibrary PositionManagerStorage {\n    bytes32 constant key = keccak256('position-manager-storage-location');\n\n    function getStorage() internal pure returns (StorageStruct storage s) {\n        bytes32 k = key;\n        assembly {\n            s.slot := k\n        }\n    }\n\n    function getRecipesKeys() internal pure returns (bytes32[] memory) {\n        bytes32[] memory recipes = new bytes32[](2);\n\n        recipes[0] = keccak256(abi.encodePacked('DepositRecipes'));\n        recipes[1] = keccak256(abi.encodePacked('WithdrawRecipes'));\n\n        return recipes;\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        StorageStruct storage ds = getStorage();\n        address previousOwner = ds.owner;\n        ds.owner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function enforceIsGovernance() internal view {\n        StorageStruct storage ds = getStorage();\n        require(\n            msg.sender == ds.registry.governance(),\n            'Storage:enforceIsContractOwner:: Must be contract governance to call this function'\n        );\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert('LibDiamondCut: Incorrect FacetCutAction');\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\n        StorageStruct storage ds = getStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function addFacet(StorageStruct storage ds, address _facetAddress) internal {\n        //enforceHasContractCode(_facetAddress, 'LibDiamondCut: New facet has no code');\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }\n\n    function addFunction(\n        StorageStruct storage ds,\n        bytes4 _selector,\n        uint96 _selectorPosition,\n        address _facetAddress\n    ) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(\n        StorageStruct storage ds,\n        address _facetAddress,\n        bytes4 _selector\n    ) internal {\n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\n        StorageStruct storage ds = getStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\n        StorageStruct storage ds = getStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), 'LibDiamondCut: Remove facet address must be address(0)');\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, 'LibDiamondCut: _init is address(0) but_calldata is not empty');\n        } else {\n            require(_calldata.length > 0, 'LibDiamondCut: _calldata is empty but _init is not address(0)');\n            if (_init != address(this)) {\n                //enforceHasContractCode(_init, 'LibDiamondCut: _init address has no code');\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert('LibDiamondCut: _init function reverted');\n                }\n            }\n        }\n    }\n}\n"
    },
    "interfaces/IScaledBalanceToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.7.6;\n\ninterface IScaledBalanceToken {\n    /**\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\n     * @param user The user whose balance is calculated\n     * @return The scaled balance of the user\n     **/\n    function scaledBalanceOf(address user) external view returns (uint256);\n\n    /**\n     * @dev Returns the scaled balance of the user and the scaled total supply.\n     * @param user The address of the user\n     * @return The scaled balance of the user\n     * @return The scaled balance and the scaled total supply\n     **/\n    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\n\n    /**\n     * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\n     * @return The scaled total supply\n     **/\n    function scaledTotalSupply() external view returns (uint256);\n}\n"
    },
    "interfaces/ILendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.7.6;\n\n/**\n * @title LendingPoolAddressesProvider contract\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n * - Owned by the Aave Governance\n * @author Aave\n **/\ninterface ILendingPoolAddressesProvider {\n    event MarketIdSet(string newMarketId);\n    event LendingPoolUpdated(address indexed newAddress);\n    event ConfigurationAdminUpdated(address indexed newAddress);\n    event EmergencyAdminUpdated(address indexed newAddress);\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n    event PriceOracleUpdated(address indexed newAddress);\n    event LendingRateOracleUpdated(address indexed newAddress);\n    event ProxyCreated(bytes32 id, address indexed newAddress);\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n    function getMarketId() external view returns (string memory);\n\n    function setMarketId(string calldata marketId) external;\n\n    function setAddress(bytes32 id, address newAddress) external;\n\n    function setAddressAsProxy(bytes32 id, address impl) external;\n\n    function getAddress(bytes32 id) external view returns (address);\n\n    function getLendingPool() external view returns (address);\n\n    function setLendingPoolImpl(address pool) external;\n\n    function getLendingPoolConfigurator() external view returns (address);\n\n    function setLendingPoolConfiguratorImpl(address configurator) external;\n\n    function getLendingPoolCollateralManager() external view returns (address);\n\n    function setLendingPoolCollateralManager(address manager) external;\n\n    function getPoolAdmin() external view returns (address);\n\n    function setPoolAdmin(address admin) external;\n\n    function getEmergencyAdmin() external view returns (address);\n\n    function setEmergencyAdmin(address admin) external;\n\n    function getPriceOracle() external view returns (address);\n\n    function setPriceOracle(address priceOracle) external;\n\n    function getLendingRateOracle() external view returns (address);\n\n    function setLendingRateOracle(address lendingRateOracle) external;\n}\n"
    },
    "interfaces/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.7.6;\n\nlibrary DataTypes {\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        //tokens addresses\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint8 id;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: Reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60-63: reserved\n        //bit 64-79: reserve factor\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        uint256 data;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "interfaces/IUniswapAddressHolder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IUniswapAddressHolder {\n    ///@notice default getter for nonfungiblePositionManagerAddress\n    ///@return address The address of the non fungible position manager\n    function nonfungiblePositionManagerAddress() external view returns (address);\n\n    ///@notice default getter for uniswapV3FactoryAddress\n    ///@return address The address of the Uniswap V3 factory\n    function uniswapV3FactoryAddress() external view returns (address);\n\n    ///@notice default getter for swapRouterAddress\n    ///@return address The address of the swap router\n    function swapRouterAddress() external view returns (address);\n\n    ///@notice Set the address of nonfungible position manager\n    ///@param newAddress new address of nonfungible position manager\n    function setNonFungibleAddress(address newAddress) external;\n\n    ///@notice Set the address of the Uniswap V3 factory\n    ///@param newAddress new address of the Uniswap V3 factory\n    function setFactoryAddress(address newAddress) external;\n\n    ///@notice Set the address of uniV3 swap router\n    ///@param newAddress new address of univ3 swap router\n    function setSwapRouterAddress(address newAddress) external;\n}\n"
    },
    "interfaces/IAaveAddressHolder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\n\ninterface IAaveAddressHolder {\n    ///@notice default getter for lendingPoolAddress\n    ///@return address The address of the lending pool from aave\n    function lendingPoolAddress() external view returns (address);\n\n    ///@notice Set the address of lending pool\n    ///@param newAddress new address of the lending pool from aave\n    function setLendingPoolAddress(address newAddress) external;\n}\n"
    },
    "interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IDiamondCut {\n    enum FacetCutAction {\n        Add,\n        Replace,\n        Remove\n    }\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "interfaces/IRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IRegistry {\n    struct Entry {\n        address contractAddress;\n        bool activated;\n    }\n\n    ///@notice return the address of PositionManagerFactory\n    ///@return address of PositionManagerFactory\n    function positionManagerFactoryAddress() external view returns (address);\n\n    ///@notice return the address of Governance\n    ///@return address of Governance\n    function governance() external view returns (address);\n\n    ///@notice return the address of Governance\n    ///@return address of Governance\n    function getModuleKeys() external view returns (bytes32[] memory);\n\n    ///@notice return the address of Governance\n    ///@return address of Governance\n    function isActive(bytes32 _id) external view returns (bool);\n\n    ///@notice return the address of Governance\n    ///@return address of Governance\n    function moduleAddress(bytes32 _id) external view returns (address);\n}\n"
    },
    "contracts/PositionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/ERC721Holder.sol';\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport './helpers/ERC20Helper.sol';\nimport './utils/Storage.sol';\nimport '../interfaces/IPositionManager.sol';\nimport '../interfaces/DataTypes.sol';\nimport '../interfaces/IUniswapAddressHolder.sol';\nimport '../interfaces/IAaveAddressHolder.sol';\nimport '../interfaces/IDiamondCut.sol';\nimport '../interfaces/IRegistry.sol';\nimport '../interfaces/ILendingPool.sol';\n\n/**\n * @title   Position Manager\n * @notice  A vault that provides liquidity on Uniswap V3.\n * @notice  User can Deposit here its Uni-v3 position\n * @notice  If user does so, he is sure that idle liquidity will always be employed in protocols\n * @notice  User will pay fee to external keepers\n * @notice  vault works for multiple positions\n */\n\ncontract PositionManager is IPositionManager, ERC721Holder {\n    uint256[] private uniswapNFTs;\n    mapping(uint256 => mapping(address => ModuleInfo)) public activatedModules;\n\n    ///@notice emitted when a position is withdrawn\n    ///@param to address of the user\n    ///@param tokenId ID of the withdrawn NFT\n    event PositionWithdrawn(address to, uint256 tokenId);\n\n    ///@notice emitted when a ERC20 is withdrawn\n    ///@param tokenAddress address of the ERC20\n    ///@param to address of the user\n    ///@param amount of the ERC20\n    event ERC20Withdrawn(address tokenAddress, address to, uint256 amount);\n\n    ///@notice emitted when a module is activated/deactivated\n    ///@param module address of module\n    ///@param tokenId position on which change is made\n    ///@param isActive true if module is activated, false if deactivated\n    event ModuleStateChanged(address module, uint256 tokenId, bool isActive);\n\n    ///@notice modifier to check if the msg.sender is the owner\n    modifier onlyOwner() {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n\n        require(msg.sender == Storage.owner, 'PositionManager::onlyOwner: Only owner can call this function');\n        _;\n    }\n\n    ///@notice modifier to check if the msg.sender is whitelisted\n    modifier onlyWhitelisted() {\n        require(\n            _calledFromRecipe(msg.sender) || _calledFromActiveModule(msg.sender) || msg.sender == address(this),\n            'PositionManager::fallback: Only whitelisted addresses can call this function'\n        );\n        _;\n    }\n\n    ///@notice modifier to check if the msg.sender is the PositionManagerFactory\n    modifier onlyFactory(address _registry) {\n        require(\n            IRegistry(_registry).positionManagerFactoryAddress() == msg.sender,\n            'PositionManager::init: Only PositionManagerFactory can init this contract'\n        );\n        _;\n    }\n\n    ///@notice modifier to check if the position is owned by the positionManager\n    modifier onlyOwnedPosition(uint256 tokenId) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        require(\n            INonfungiblePositionManager(Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()).ownerOf(\n                tokenId\n            ) == address(this),\n            'PositionManager::onlyOwnedPosition: positionManager is not owner of the token'\n        );\n        _;\n    }\n\n    constructor(\n        address _owner,\n        address _diamondCutFacet,\n        address _registry\n    ) payable onlyFactory(_registry) {\n        PositionManagerStorage.setContractOwner(_owner);\n\n        // Add the diamondCut external function from the diamondCutFacet\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\n        bytes4[] memory functionSelectors = new bytes4[](1);\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\n        cut[0] = IDiamondCut.FacetCut({\n            facetAddress: _diamondCutFacet,\n            action: IDiamondCut.FacetCutAction.Add,\n            functionSelectors: functionSelectors\n        });\n        PositionManagerStorage.diamondCut(cut, address(0), '');\n    }\n\n    function init(\n        address _owner,\n        address _uniswapAddressHolder,\n        address _registry,\n        address _aaveAddressHolder\n    ) public onlyFactory(_registry) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        Storage.owner = _owner;\n        Storage.uniswapAddressHolder = IUniswapAddressHolder(_uniswapAddressHolder);\n        Storage.registry = IRegistry(_registry);\n        Storage.aaveAddressHolder = IAaveAddressHolder(_aaveAddressHolder);\n    }\n\n    ///@notice remove awareness of tokenId UniswapV3 NFT\n    ///@param tokenId ID of the NFT to remove\n    function removePositionId(uint256 tokenId) public override onlyWhitelisted {\n        for (uint256 i = 0; i < uniswapNFTs.length; i++) {\n            if (uniswapNFTs[i] == tokenId) {\n                if (uniswapNFTs.length > 1) {\n                    uniswapNFTs[i] = uniswapNFTs[uniswapNFTs.length - 1];\n                    uniswapNFTs.pop();\n                } else {\n                    delete uniswapNFTs;\n                }\n                return;\n            }\n        }\n    }\n\n    ///@notice add tokenId in the uniswapNFTs array\n    ///@param tokenId ID of the added NFT\n    function pushPositionId(uint256 tokenId) public override onlyOwnedPosition(tokenId) {\n        uniswapNFTs.push(tokenId);\n    }\n\n    ///@notice return the IDs of the uniswap positions\n    ///@return array of IDs\n    function getAllUniPositions() external view override returns (uint256[] memory) {\n        uint256[] memory uniswapNFTsMemory = uniswapNFTs;\n        return uniswapNFTsMemory;\n    }\n\n    ///@notice toggle module state, activated (true) or not (false)\n    ///@param tokenId ID of the NFT\n    ///@param moduleAddress address of the module\n    ///@param activated state of the module\n    function toggleModule(\n        uint256 tokenId,\n        address moduleAddress,\n        bool activated\n    ) external override onlyOwner onlyOwnedPosition(tokenId) {\n        activatedModules[tokenId][moduleAddress].isActive = activated;\n        emit ModuleStateChanged(moduleAddress, tokenId, activated);\n    }\n\n    ///@notice return the state of the module for tokenId position\n    ///@param tokenId ID of the position\n    ///@param moduleAddress address of the module\n    function getModuleState(uint256 tokenId, address moduleAddress)\n        external\n        view\n        override\n        onlyOwnedPosition(tokenId)\n        returns (bool)\n    {\n        return activatedModules[tokenId][moduleAddress].isActive;\n    }\n\n    ///@notice sets the data of a module strategy for tokenId position\n    ///@param tokenId ID of the position\n    ///@param moduleAddress address of the module\n    ///@param data data for the module\n    function setModuleData(\n        uint256 tokenId,\n        address moduleAddress,\n        bytes memory data\n    ) external override onlyOwner onlyOwnedPosition(tokenId) {\n        activatedModules[tokenId][moduleAddress].data = data;\n    }\n\n    ///@notice returns the data of a module strategy for tokenId position\n    ///@param tokenId ID of the position\n    ///@param moduleAddress address of the module\n    function getModuleData(uint256 tokenId, address moduleAddress)\n        external\n        view\n        override\n        onlyOwnedPosition(tokenId)\n        returns (bytes memory)\n    {\n        return activatedModules[tokenId][moduleAddress].data;\n    }\n\n    ///@notice stores old position data when liquidity is moved to aave\n    ///@param token address of the token\n    ///@param id ID of the position\n    ///@param tokenId of the position\n    function pushTokenIdToAave(\n        address token,\n        uint256 id,\n        uint256 tokenId\n    ) public override onlyWhitelisted {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        require(\n            Storage.aaveUserReserves[token].positionShares[id] > 0,\n            'PositionManager::pushOldPositionData: positionShares does not exist'\n        );\n\n        Storage.aaveUserReserves[token].tokenIds[id] = tokenId;\n    }\n\n    ///@notice returns the old position data of an aave position\n    ///@param token address of the token\n    ///@param id ID of aave position\n    ///@return tokenId of the position\n    function getTokenIdFromAavePosition(address token, uint256 id)\n        public\n        view\n        override\n        onlyWhitelisted\n        returns (uint256)\n    {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        require(\n            Storage.aaveUserReserves[token].positionShares[id] > 0,\n            'PositionManager::getOldPositionData: positionShares does not exist'\n        );\n\n        return Storage.aaveUserReserves[token].tokenIds[id];\n    }\n\n    ///@notice return the address of this position manager owner\n    ///@return address of the owner\n    function getOwner() external view override returns (address) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        return Storage.owner;\n    }\n\n    ///@notice return the all tokens of tokenAddress in the positionManager\n    ///@param tokenAddress address of the token to be withdrawn\n    function withdrawERC20(address tokenAddress) external override onlyOwner {\n        ERC20Helper._approveToken(tokenAddress, address(this), 2**256 - 1);\n        uint256 amount = ERC20Helper._withdrawTokens(tokenAddress, msg.sender, 2**256 - 1);\n        emit ERC20Withdrawn(tokenAddress, msg.sender, amount);\n    }\n\n    ///@notice function to check if an address corresponds to an active module (or this contract)\n    ///@param _address input address\n    ///@return isCalledFromActiveModule boolean\n    function _calledFromActiveModule(address _address) internal view returns (bool isCalledFromActiveModule) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        bytes32[] memory keys = Storage.registry.getModuleKeys();\n        for (uint256 i = 0; i < keys.length; i++) {\n            if (Storage.registry.moduleAddress(keys[i]) == _address && Storage.registry.isActive(keys[i]) == true) {\n                isCalledFromActiveModule = true;\n                break;\n            }\n        }\n    }\n\n    function _calledFromRecipe(address _address) internal view returns (bool isCalledFromRecipe) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        bytes32[] memory recipeKeys = PositionManagerStorage.getRecipesKeys();\n\n        for (uint256 i = 0; i < recipeKeys.length; i++) {\n            if (Storage.registry.moduleAddress(recipeKeys[i]) == _address) {\n                isCalledFromRecipe = true;\n                break;\n            }\n        }\n    }\n\n    fallback() external payable onlyWhitelisted {\n        StorageStruct storage Storage;\n        bytes32 position = PositionManagerStorage.key;\n        ///@dev get diamond storage position\n        assembly {\n            Storage.slot := position\n        }\n        address facet = Storage.selectorToFacetAndPosition[msg.sig].facetAddress;\n        require(facet != address(0), 'PositionManager::Fallback: Function does not exist');\n        ///@dev Execute external function from facet using delegatecall and return any value.\n\n        assembly {\n            // copy function selector and any arguments\n            calldatacopy(0, 0, calldatasize())\n            // execute function call using the facet\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n            // get any return value\n            returndatacopy(0, 0, returndatasize())\n            // return any return value or error back to the caller\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    receive() external payable {\n        revert();\n        //we need to decide what to do when the contract receives ether\n        //for now we just revert\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC721Receiver.sol\";\n\n  /**\n   * @dev Implementation of the {IERC721Receiver} interface.\n   *\n   * Accepts all token transfers. \n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n   */\ncontract ERC721Holder is IERC721Receiver {\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/helpers/ERC20Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n\nlibrary ERC20Helper {\n    ///@dev library to interact with ERC20 token\n    using SafeERC20 for IERC20;\n\n    ///@notice approve the token to be able to transfer it\n    ///@param token address of the token\n    ///@param spender address of the spender\n    ///@param amount amount to approve\n    function _approveToken(\n        address token,\n        address spender,\n        uint256 amount\n    ) internal {\n        if (IERC20(token).allowance(address(this), spender) >= amount) {\n            return;\n        }\n        IERC20(token).approve(spender, amount);\n    }\n\n    ///@notice return the allowance of the token that the spender is able to spend\n    ///@param token address of the token\n    ///@param owner address of the owner\n    ///@param spender address of the spender\n    ///@return uint256 allowance amount\n    function _getAllowance(\n        address token,\n        address owner,\n        address spender\n    ) internal view returns (uint256) {\n        return IERC20(token).allowance(owner, spender);\n    }\n\n    ///@notice pull token if it is below the threshold amount\n    ///@param token address of the token\n    ///@param from address of the sender\n    ///@param amount amount of tokens to be pulled\n    ///@return uint256 amount of the tokens that were pulled\n    function _pullTokensIfNeeded(\n        address token,\n        address from,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 needed = 0;\n        uint256 balance = _getBalance(token, address(this));\n        if (balance < amount) {\n            if (amount - balance < _getBalance(token, from)) {\n                needed = amount - balance;\n                IERC20(token).safeTransferFrom(from, address(this), needed);\n            }\n        }\n        return needed;\n    }\n\n    ///@notice withdraw the tokens from the vault and send them to the user\n    ///@param token address of the token\n    ///@param to address of the user\n    ///@param amount amount of tokens to withdraw\n    function _withdrawTokens(\n        address token,\n        address to,\n        uint256 amount\n    ) internal returns (uint256 amountOut) {\n        uint256 balance = _getBalance(token, address(this));\n        if (balance < amount) {\n            amountOut = balance;\n        } else {\n            amountOut = amount;\n        }\n        IERC20(token).safeTransferFrom(address(this), to, amountOut);\n    }\n\n    ///@notice get the balance of the token for the given address\n    ///@param token address of the token\n    ///@param account address of the account\n    ///@return uint256 return the balance of the token for the given address\n    function _getBalance(address token, address account) internal view returns (uint256) {\n        return IERC20(token).balanceOf(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/PositionManagerFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport './PositionManager.sol';\nimport '../interfaces/IPositionManagerFactory.sol';\nimport '../interfaces/IDiamondCut.sol';\n\ncontract PositionManagerFactory is IPositionManagerFactory {\n    address governance;\n    address diamondCutFacet;\n    address uniswapAddressHolder;\n    address aaveAddressHolder;\n    address registry;\n    address[] public positionManagers;\n    IDiamondCut.FacetCut[] public actions;\n    mapping(address => address) public override userToPositionManager;\n\n    ///@notice emitted when a new position manager is created\n    ///@param positionManager address of PositionManager\n    ///@param user address of user\n    event PositionManagerCreated(address indexed positionManager, address user);\n\n    modifier onlyGovernance() {\n        require(msg.sender == governance, 'PositionManagerFactory::onlyGovernance: Only governance can add actions');\n        _;\n    }\n\n    constructor(address _governance) {\n        governance = _governance;\n    }\n\n    ///@notice changes the address of the governance\n    ///@param _governance address of the new governance\n    function changeGovernance(address _governance) external onlyGovernance {\n        governance = _governance;\n    }\n\n    ///@notice adds a new action to the factory\n    ///@param actionAddress address of the action\n    ///@param selectors action selectors\n    function pushActionData(address actionAddress, bytes4[] calldata selectors) external onlyGovernance {\n        actions.push(\n            IDiamondCut.FacetCut({\n                facetAddress: actionAddress,\n                action: IDiamondCut.FacetCutAction.Add,\n                functionSelectors: selectors\n            })\n        );\n    }\n\n    ///@notice deploy new positionManager and assign to userAddress\n    ///@return address[] return array of PositionManager address updated with the last deployed PositionManager\n    function create() public override returns (address[] memory) {\n        require(\n            userToPositionManager[msg.sender] == 0x0000000000000000000000000000000000000000,\n            'PositionManagerFactory::create: User already has a PositionManager'\n        );\n        PositionManager manager = new PositionManager(msg.sender, diamondCutFacet, registry);\n        positionManagers.push(address(manager));\n        userToPositionManager[msg.sender] = address(manager);\n        manager.init(msg.sender, uniswapAddressHolder, registry, aaveAddressHolder);\n        bytes memory _calldata;\n        IDiamondCut(address(manager)).diamondCut(actions, 0x0000000000000000000000000000000000000000, _calldata);\n\n        emit PositionManagerCreated(address(manager), msg.sender);\n\n        return positionManagers;\n    }\n\n    ///@notice get all positionManager array of address\n    ///@dev array need to return with a custom function to get all the array\n    ///@return address[] return the array of positionManager\n    function getAllPositionManagers() public view override returns (address[] memory) {\n        return positionManagers;\n    }\n}\n"
    },
    "interfaces/IPositionManagerFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IPositionManagerFactory {\n    function create() external returns (address[] memory);\n\n    function getAllPositionManagers() external view returns (address[] memory);\n\n    function userToPositionManager(address _user) external view returns (address);\n}\n"
    },
    "contracts/DiamondCutFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\npragma abicoder v2;\n\n/******************************************************************************\\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport {IDiamondCut} from '../interfaces/IDiamondCut.sol';\nimport './utils/Storage.sol';\n\ncontract DiamondCutFacet is IDiamondCut {\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external override {\n        PositionManagerStorage.enforceIsGovernance();\n        PositionManagerStorage.diamondCut(_diamondCut, _init, _calldata);\n    }\n}\n"
    },
    "contracts/utils/WithdrawRecipes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\nimport '../helpers/UniswapNFTHelper.sol';\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/IPositionManagerFactory.sol';\nimport '../../interfaces/IUniswapAddressHolder.sol';\nimport '../../interfaces/actions/ICollectFees.sol';\nimport '../../interfaces/actions/IClosePosition.sol';\nimport '../../interfaces/actions/IDecreaseLiquidity.sol';\nimport '../../interfaces/actions/IZapOut.sol';\n\n///@notice WithdrawRecipes allows user to withdraw positions from PositionManager\ncontract WithdrawRecipes {\n    IPositionManagerFactory positionManagerFactory;\n    IUniswapAddressHolder uniswapAddressHolder;\n\n    constructor(address _positionManagerFactory, address _uniswapAddressHolder) {\n        positionManagerFactory = IPositionManagerFactory(_positionManagerFactory);\n        uniswapAddressHolder = IUniswapAddressHolder(_uniswapAddressHolder);\n    }\n\n    ///@notice remove uniswap position NFT to the position manager\n    ///@param tokenId ID of deposited token\n    ///@param partToWithdraw percentage of token to withdraw in base points\n    function withdrawUniNft(uint256 tokenId, uint256 partToWithdraw) external {\n        require(\n            partToWithdraw > 0 && partToWithdraw <= 10000,\n            'WithdrawRecipes::withdrawUniNft: part to withdraw must be between 0 and 10000'\n        );\n        if (partToWithdraw == 10000) {\n            IClosePosition(positionManagerFactory.userToPositionManager(msg.sender)).closePosition(\n                tokenId,\n                true ///@dev return the tokens to the user\n            );\n        } else {\n            // 1. get position size\n            // 2. divide for part to withdraw\n            (uint256 amount0, uint256 amount1) = UniswapNFTHelper._getAmountsfromTokenId(\n                tokenId,\n                INonfungiblePositionManager(uniswapAddressHolder.nonfungiblePositionManagerAddress()),\n                uniswapAddressHolder.uniswapV3FactoryAddress()\n            );\n            IDecreaseLiquidity(positionManagerFactory.userToPositionManager(msg.sender)).decreaseLiquidity(\n                tokenId,\n                (amount0 * partToWithdraw) / 10000,\n                (amount1 * partToWithdraw) / 10000\n            );\n            ICollectFees(positionManagerFactory.userToPositionManager(msg.sender)).collectFees(tokenId, true);\n        }\n    }\n\n    ///@notice remove a position from positionmanager zapping out\n    ///@param tokenId ID of the token to withdraw\n    ///@param tokenOut address of the token to withdraw\n    function zapOutUniNft(uint256 tokenId, address tokenOut) external {\n        IZapOut(positionManagerFactory.userToPositionManager(msg.sender)).zapOut(tokenId, tokenOut);\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/helpers/UniswapNFTHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol';\n\n///@title library to interact with NFT token and do some useful function with it\nlibrary UniswapNFTHelper {\n    ///@notice get the pool address\n    ///@param factory address of the UniswapV3Factory\n    ///@param token0 address of the token0\n    ///@param token1 address of the token1\n    ///@param fee fee tier of the pool\n    ///@return address address of the pool\n    function _getPool(\n        address factory,\n        address token0,\n        address token1,\n        uint24 fee\n    ) internal pure returns (address) {\n        return PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(token0, token1, fee));\n    }\n\n    ///@notice get the address of the pool from the tokenId\n    ///@param tokenId id of the position (NFT)\n    ///@param nonfungiblePositionManager instance of the nonfungiblePositionManager given by the caller (address)\n    ///@param factory address of the UniswapV3Factory\n    ///@return address address of the pool\n    function _getPoolFromTokenId(\n        uint256 tokenId,\n        INonfungiblePositionManager nonfungiblePositionManager,\n        address factory\n    ) internal view returns (address) {\n        (, , address token0, address token1, uint24 fee, , , , , , , ) = nonfungiblePositionManager.positions(tokenId);\n\n        return _getPool(factory, token0, token1, fee);\n    }\n\n    ///@notice get the address of the tpkens from the tokenId\n    ///@param tokenId id of the position (NFT)\n    ///@param nonfungiblePositionManager instance of the nonfungiblePositionManager given by the caller (address)\n    ///@return token0address address of the token0\n    ///@return token1address address of the token1\n    ///@return fee fee tier of the pool\n    ///@return tickLower of position\n    ///@return tickUpper of position\n    function _getTokens(uint256 tokenId, INonfungiblePositionManager nonfungiblePositionManager)\n        internal\n        view\n        returns (\n            address token0address,\n            address token1address,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper\n        )\n    {\n        (, , token0address, token1address, fee, tickLower, tickUpper, , , , , ) = nonfungiblePositionManager.positions(\n            tokenId\n        );\n    }\n\n    ///@notice get the amount of tokens in a position\n    ///@param tokenId id of the position (NFT)\n    ///@param nonfungiblePositionManager instance of the nonfungiblePositionManager given by the caller (address)\n    ///@param factory address of the UniswapV3Factory\n    ///@return uint256 amount of token0\n    ///@return uint256 amount of token1\n    function _getAmountsfromTokenId(\n        uint256 tokenId,\n        INonfungiblePositionManager nonfungiblePositionManager,\n        address factory\n    ) internal view returns (uint256, uint256) {\n        (, , , , , int24 tickLower, int24 tickUpper, uint128 liquidity, , , , ) = nonfungiblePositionManager.positions(\n            tokenId\n        );\n        return\n            _getAmountsFromLiquidity(\n                liquidity,\n                tickLower,\n                tickUpper,\n                _getPoolFromTokenId(tokenId, nonfungiblePositionManager, factory)\n            );\n    }\n\n    ///@notice get the amount of tokens from liquidity and tick ranges\n    ///@param liquidity amount of liquidity to convert\n    ///@param tickLower lower tick range\n    ///@param tickUpper upper tick range\n    ///@param poolAddress address of the pool\n    ///@return uint256 amount of token0\n    ///@return uint256 amount of token1\n    function _getAmountsFromLiquidity(\n        uint128 liquidity,\n        int24 tickLower,\n        int24 tickUpper,\n        address poolAddress\n    ) internal view returns (uint256, uint256) {\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\n\n        (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\n        return\n            LiquidityAmounts.getAmountsForLiquidity(\n                sqrtRatioX96,\n                TickMath.getSqrtRatioAtTick(tickLower),\n                TickMath.getSqrtRatioAtTick(tickUpper),\n                liquidity\n            );\n    }\n\n    ///@notice Computes the amount of liquidity for a given amount of token0, token1\n    ///@param token0 The amount of token0 being sent in\n    ///@param token1 The amount of token1 being sent in\n    ///@param tickLower lower tick range\n    ///@param tickUpper upper tick range\n    ///@param poolAddress The address of the pool\n    ///@return uint128 The amount of liquidity received\n    function _getLiquidityFromAmounts(\n        uint256 token0,\n        uint256 token1,\n        int24 tickLower,\n        int24 tickUpper,\n        address poolAddress\n    ) internal view returns (uint128) {\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\n        (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\n\n        return\n            LiquidityAmounts.getLiquidityForAmounts(\n                sqrtRatioX96,\n                TickMath.getSqrtRatioAtTick(tickLower),\n                TickMath.getSqrtRatioAtTick(tickUpper),\n                token0,\n                token1\n            );\n    }\n}\n"
    },
    "interfaces/actions/ICollectFees.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface ICollectFees {\n    function collectFees(uint256 tokenId, bool returnTokensToUser) external returns (uint256 amount0, uint256 amount1);\n}\n"
    },
    "interfaces/actions/IClosePosition.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IClosePosition {\n    function closePosition(uint256 tokenId, bool returnTokenToUser)\n        external\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n}\n"
    },
    "interfaces/actions/IDecreaseLiquidity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IDecreaseLiquidity {\n    function decreaseLiquidity(\n        uint256 tokenId,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    )\n        external\n        returns (\n            uint128 liquidityToDecrease,\n            uint256 amount0,\n            uint256 amount1\n        );\n}\n"
    },
    "interfaces/actions/IZapOut.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IZapOut {\n    function zapOut(uint256 tokenId, address tokenOut) external returns (uint256);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                sqrtRatioBX96\n            ) / sqrtRatioAX96;\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n        } else {\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0 <0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/actions/ZapOut.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\nimport '../helpers/UniswapNFTHelper.sol';\nimport '../helpers/ERC20Helper.sol';\nimport '../utils/Storage.sol';\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/actions/IZapOut.sol';\n\n///@notice ZapOut allows users to close positions and withdraw to a single output token\ncontract ZapOut is IZapOut {\n    ///@notice emitted when a UniswapNFT is zapped out\n    ///@param positionManager address of PositionManager\n    ///@param tokenId Id of zapped token\n    ///@param tokenOut address of token zapped out\n    ///@param amountOut amount of tokenOut zapped out\n    event ZappedOut(address indexed positionManager, uint256 tokenId, address tokenOut, uint256 amountOut);\n\n    ///@notice burns a uni NFT with a single output token, the output token can be different from the two position tokens\n    ///@param tokenId id of the NFT to burn\n    ///@param tokenOut address of output token\n    ///@return uint256 amount of tokenOut withdrawn\n    function zapOut(uint256 tokenId, address tokenOut) public override returns (uint256) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        INonfungiblePositionManager nonfungiblePositionManager = INonfungiblePositionManager(\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()\n        );\n\n        (address token0, address token1, , , ) = UniswapNFTHelper._getTokens(tokenId, nonfungiblePositionManager);\n\n        (, , , , , , , uint128 liquidity, , , , ) = nonfungiblePositionManager.positions(tokenId);\n\n        nonfungiblePositionManager.decreaseLiquidity(\n            INonfungiblePositionManager.DecreaseLiquidityParams({\n                tokenId: tokenId,\n                liquidity: liquidity,\n                amount0Min: 0,\n                amount1Min: 0,\n                deadline: block.timestamp + 120\n            })\n        );\n\n        (uint256 amount0, uint256 amount1) = nonfungiblePositionManager.collect(\n            INonfungiblePositionManager.CollectParams({\n                tokenId: tokenId,\n                recipient: address(this),\n                amount0Max: 2**128 - 1,\n                amount1Max: 2**128 - 1\n            })\n        );\n\n        nonfungiblePositionManager.burn(tokenId);\n        IPositionManager(address(this)).removePositionId(tokenId);\n\n        if (tokenOut != token0) {\n            amount0 = _swapToTokenOut(tokenOut, token0, amount0);\n        }\n\n        if (tokenOut != token1) {\n            amount1 = _swapToTokenOut(tokenOut, token1, amount1);\n        }\n\n        ERC20Helper._approveToken(tokenOut, address(this), amount0 + amount1);\n        ERC20Helper._withdrawTokens(tokenOut, Storage.owner, amount0 + amount1);\n\n        emit ZappedOut(address(this), tokenId, tokenOut, amount0 + amount1);\n        return amount0 + amount1;\n    }\n\n    ///@notice performs the swap to tokenOut\n    ///@param tokenOut address of output token\n    ///@param tokenIn address of input token\n    ///@param amountIn amount of input token\n    ///@return amountOut of output token\n    function _swapToTokenOut(\n        address tokenOut,\n        address tokenIn,\n        uint256 amountIn\n    ) internal returns (uint256 amountOut) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n\n        ERC20Helper._approveToken(tokenIn, Storage.uniswapAddressHolder.swapRouterAddress(), amountIn);\n\n        ISwapRouter swapRouter = ISwapRouter(Storage.uniswapAddressHolder.swapRouterAddress());\n        amountOut = swapRouter.exactInputSingle(\n            ISwapRouter.ExactInputSingleParams({\n                tokenIn: tokenIn,\n                tokenOut: tokenOut,\n                fee: _findBestFee(tokenIn, tokenOut),\n                recipient: address(this),\n                deadline: block.timestamp + 120,\n                amountIn: amountIn,\n                amountOutMinimum: 1,\n                sqrtPriceLimitX96: 0\n            })\n        );\n    }\n\n    ///@notice finds the best fee tier on which to perform a swap\n    ///@param token0 address of first token\n    ///@param token1 address of second token\n    ///@return fee suggested fee tier\n    function _findBestFee(address token0, address token1) internal view returns (uint24 fee) {\n        uint128 bestLiquidity = 0;\n        uint16[4] memory fees = [100, 500, 3000, 10000];\n\n        for (uint8 i = 0; i < 4; i++) {\n            try this.getPoolLiquidity(token0, token1, uint24(fees[i])) returns (uint128 nextLiquidity) {\n                if (nextLiquidity > bestLiquidity) {\n                    bestLiquidity = nextLiquidity;\n                    fee = fees[i];\n                }\n            } catch {\n                //pass\n            }\n        }\n\n        if (bestLiquidity == 0) {\n            revert('ZapOut::_findBestFee: No pool found with desired tokens');\n        }\n    }\n\n    ///@notice wrapper of getPoolLiquidity to use try/catch statement\n    ///@param token0 address of first token\n    ///@param token1 address of second token\n    ///@param fee pool fee tier\n    ///@return liquidity of the pool\n    function getPoolLiquidity(\n        address token0,\n        address token1,\n        uint24 fee\n    ) public view returns (uint128 liquidity) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        return\n            IUniswapV3Pool(\n                UniswapNFTHelper._getPool(Storage.uniswapAddressHolder.uniswapV3FactoryAddress(), token0, token1, fee)\n            ).liquidity();\n    }\n}\n"
    },
    "contracts/utils/DepositRecipes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '../../interfaces/actions/IMint.sol';\nimport '../../interfaces/actions/IZapIn.sol';\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/IPositionManagerFactory.sol';\nimport '../../interfaces/IUniswapAddressHolder.sol';\n\n///@notice DepositRecipes allows user to fill their position manager with UniswapV3 positions\n///        by depositing an already minted NFT or by minting directly a new one\ncontract DepositRecipes {\n    IUniswapAddressHolder uniswapAddressHolder;\n    IPositionManagerFactory positionManagerFactory;\n\n    constructor(address _uniswapAddressHolder, address _positionManagerFactory) {\n        uniswapAddressHolder = IUniswapAddressHolder(_uniswapAddressHolder);\n        positionManagerFactory = IPositionManagerFactory(_positionManagerFactory);\n    }\n\n    ///@notice emitted when a position is created\n    ///@param positionManager the address of the position manager which recieved the position\n    ///@param from address of the user\n    ///@param tokenId ID of the minted NFT\n    event PositionDeposited(address indexed positionManager, address from, uint256 tokenId);\n\n    ///@notice add uniswap position NFT to the position manager\n    ///@param tokenIds IDs of deposited tokens\n    function depositUniNft(uint256[] calldata tokenIds) external {\n        address positionManagerAddress = positionManagerFactory.userToPositionManager(msg.sender);\n\n        for (uint32 i = 0; i < tokenIds.length; i++) {\n            INonfungiblePositionManager(uniswapAddressHolder.nonfungiblePositionManagerAddress()).safeTransferFrom(\n                msg.sender,\n                positionManagerAddress,\n                tokenIds[i],\n                '0x0'\n            );\n            IPositionManager(positionManagerAddress).pushPositionId(tokenIds[i]);\n            emit PositionDeposited(positionManagerAddress, msg.sender, tokenIds[i]);\n        }\n    }\n\n    ///@notice mint uniswapV3 NFT and deposit in the position manager\n    ///@param token0 the first token to be deposited\n    ///@param token1 the second token to be deposited\n    ///@param fee fee tier of the pool to be deposited in\n    ///@param tickLower the lower bound of the position range\n    ///@param tickUpper the upper bound of the position range\n    ///@param amount0Desired the amount of the first token to be deposited\n    ///@param amount1Desired the amount of the second token to be deposited\n    ///@return tokenId the ID of the minted NFT\n    function mintAndDeposit(\n        address token0,\n        address token1,\n        uint24 fee,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    ) external returns (uint256 tokenId) {\n        address positionManagerAddress = positionManagerFactory.userToPositionManager(msg.sender);\n\n        ///@dev send tokens to position manager to be able to call the mint action\n        IERC20(token0).transferFrom(msg.sender, positionManagerAddress, amount0Desired);\n        IERC20(token1).transferFrom(msg.sender, positionManagerAddress, amount1Desired);\n\n        (tokenId, , ) = IMint(positionManagerAddress).mint(\n            IMint.MintInput(token0, token1, fee, tickLower, tickUpper, amount0Desired, amount1Desired)\n        );\n    }\n\n    ///@notice mints a uni NFT with a single input token, the token in input can be different from the two position tokens\n    ///@param tokenIn address of input token\n    ///@param amountIn amount of input token\n    ///@param token0 address token0 of the pool\n    ///@param token1 address token1 of the pool\n    ///@param tickLower lower bound of desired position\n    ///@param tickUpper upper bound of desired position\n    ///@param fee fee tier of the pool\n    ///@return tokenId of minted NFT\n    function zapInUniNft(\n        address tokenIn,\n        uint256 amountIn,\n        address token0,\n        address token1,\n        int24 tickLower,\n        int24 tickUpper,\n        uint24 fee\n    ) external returns (uint256 tokenId) {\n        address positionManagerAddress = positionManagerFactory.userToPositionManager(msg.sender);\n\n        (tokenId) = IZapIn(positionManagerAddress).zapIn(tokenIn, amountIn, token0, token1, tickLower, tickUpper, fee);\n        IPositionManager(positionManagerAddress).pushPositionId(tokenId);\n    }\n}\n"
    },
    "interfaces/actions/IMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IMint {\n    ///@notice struct for input of the mint action\n    ///@param token0Address address of the first token\n    ///@param token1Address address of the second token\n    ///@param fee pool fee level\n    ///@param tickLower lower tick of the position\n    ///@param tickUpper upper tick of the position\n    ///@param amount0Desired amount of first token in position\n    ///@param amount1Desired amount of second token in position\n    struct MintInput {\n        address token0Address;\n        address token1Address;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n    }\n\n    function mint(MintInput calldata inputs)\n        external\n        returns (\n            uint256 tokenId,\n            uint256 amount0Deposited,\n            uint256 amount1Deposited\n        );\n}\n"
    },
    "interfaces/actions/IZapIn.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IZapIn {\n    function zapIn(\n        address tokenIn,\n        uint256 amountIn,\n        address token0,\n        address token1,\n        int24 tickLower,\n        int24 tickUpper,\n        uint24 fee\n    ) external returns (uint256);\n}\n"
    },
    "contracts/utils/UniswapAddressHolder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '../../interfaces/IUniswapAddressHolder.sol';\n\ncontract UniswapAddressHolder is IUniswapAddressHolder {\n    address public override nonfungiblePositionManagerAddress;\n    address public override uniswapV3FactoryAddress;\n    address public override swapRouterAddress;\n\n    constructor(\n        address _nonfungiblePositionManagerAddress,\n        address _uniswapV3FactoryAddress,\n        address _swapRouterAddress\n    ) {\n        nonfungiblePositionManagerAddress = _nonfungiblePositionManagerAddress;\n        uniswapV3FactoryAddress = _uniswapV3FactoryAddress;\n        swapRouterAddress = _swapRouterAddress;\n    }\n\n    ///@notice Set the address of the non fungible position manager\n    ///@param newAddress The address of the non fungible position manager\n    function setNonFungibleAddress(address newAddress) external override {\n        nonfungiblePositionManagerAddress = newAddress;\n    }\n\n    ///@notice Set the address of the Uniswap V3 factory\n    ///@param newAddress The address of the Uniswap V3 factory\n    function setFactoryAddress(address newAddress) external override {\n        uniswapV3FactoryAddress = newAddress;\n    }\n\n    ///@notice Set the address of the swap router\n    ///@param newAddress The address of the swap router\n    function setSwapRouterAddress(address newAddress) external override {\n        swapRouterAddress = newAddress;\n    }\n}\n"
    },
    "contracts/modules/IdleLiquidityModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '../helpers/UniswapNFTHelper.sol';\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/IUniswapAddressHolder.sol';\nimport '../../interfaces/actions/IClosePosition.sol';\nimport '../../interfaces/actions/ISwapToPositionRatio.sol';\nimport '../../interfaces/actions/IMint.sol';\n\n///@title Idle Liquidity Module to manage liquidity for a user position\ncontract IdleLiquidityModule {\n    ///@notice uniswap address holder\n    IUniswapAddressHolder public uniswapAddressHolder;\n\n    ///@notice assing the uniswap address holder to the contract\n    ///@param _uniswapAddressHolder address of the uniswap address holder\n    constructor(address _uniswapAddressHolder) {\n        uniswapAddressHolder = IUniswapAddressHolder(_uniswapAddressHolder);\n    }\n\n    ///@notice check if the position is in the range of the pools and return rebalance the position swapping the tokens\n    ///@param tokenId tokenId of the position\n    ///@param positionManager address of the position manager\n    function rebalance(uint256 tokenId, IPositionManager positionManager) public {\n        uint24 tickDistance = _checkDistanceFromRange(tokenId);\n        if (positionManager.getModuleState(tokenId, address(this))) {\n            uint24 rebalanceDistance = abi.decode(positionManager.getModuleData(tokenId, address(this)), (uint24));\n            ///@dev rebalance only if the position's range is outside of the tick of the pool (tickDistance < 0) and the position is far enough from tick of the pool\n            if (tickDistance > 0 && rebalanceDistance <= tickDistance) {\n                (, , address token0, address token1, uint24 fee, , , , , , , ) = INonfungiblePositionManager(\n                    uniswapAddressHolder.nonfungiblePositionManagerAddress()\n                ).positions(tokenId);\n\n                ///@dev calc tickLower and tickUpper with the same delta as the position but with tick of the pool in center\n                (int24 tickLower, int24 tickUpper) = _calcTick(tokenId, fee);\n\n                ///@dev call closePositionAction\n                (, uint256 amount0Closed, uint256 amount1Closed) = IClosePosition(address(positionManager))\n                    .closePosition(tokenId, false);\n\n                ///@dev call swapToPositionAction to perform the swap\n                (uint256 token0Swapped, uint256 token1Swapped) = ISwapToPositionRatio(address(positionManager))\n                    .swapToPositionRatio(\n                        ISwapToPositionRatio.SwapToPositionInput(\n                            token0,\n                            token1,\n                            fee,\n                            amount0Closed,\n                            amount1Closed,\n                            tickLower,\n                            tickUpper\n                        )\n                    );\n\n                ///@dev call mintAction\n                IMint(address(positionManager)).mint(\n                    IMint.MintInput(token0, token1, fee, tickLower, tickUpper, token0Swapped - 10, token1Swapped - 10)\n                );\n            }\n        }\n    }\n\n    ///@notice checkDistance from ticklower tickupper from tick of the pools\n    ///@param tokenId tokenId of the position\n    ///@return int24 distance from ticklower tickupper from tick of the pools and return the minimum distance\n    function _checkDistanceFromRange(uint256 tokenId) internal view returns (uint24) {\n        (\n            ,\n            ,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            ,\n            ,\n            ,\n            ,\n\n        ) = INonfungiblePositionManager(uniswapAddressHolder.nonfungiblePositionManagerAddress()).positions(tokenId);\n\n        IUniswapV3Pool pool = IUniswapV3Pool(\n            UniswapNFTHelper._getPool(uniswapAddressHolder.uniswapV3FactoryAddress(), token0, token1, fee)\n        );\n        (, int24 tick, , , , , ) = pool.slot0();\n\n        if (tick > tickUpper) {\n            return uint24(tick - tickUpper);\n        } else if (tick < tickLower) {\n            return uint24(tickLower - tick);\n        } else {\n            return 0;\n        }\n    }\n\n    ///@notice calc tickLower and tickUpper with the same delta as the position but with tick of the pool in center\n    ///@param tokenId tokenId of the position\n    ///@param fee fee of the position\n    ///@return int24 tickLower\n    ///@return int24 tickUpper\n    function _calcTick(uint256 tokenId, uint24 fee) internal view returns (int24, int24) {\n        (, , , , , int24 tickLower, int24 tickUpper, , , , , ) = INonfungiblePositionManager(\n            uniswapAddressHolder.nonfungiblePositionManagerAddress()\n        ).positions(tokenId);\n\n        int24 tickDelta = tickUpper - tickLower;\n\n        IUniswapV3Pool pool = IUniswapV3Pool(\n            UniswapNFTHelper._getPoolFromTokenId(\n                tokenId,\n                INonfungiblePositionManager(uniswapAddressHolder.nonfungiblePositionManagerAddress()),\n                uniswapAddressHolder.uniswapV3FactoryAddress()\n            )\n        );\n\n        (, int24 tick, , , , , ) = pool.slot0();\n        int24 tickSpacing = int24(fee) / 50;\n\n        return (((tick - tickDelta) / tickSpacing) * tickSpacing, ((tick + tickDelta) / tickSpacing) * tickSpacing);\n    }\n}\n"
    },
    "interfaces/actions/ISwapToPositionRatio.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface ISwapToPositionRatio {\n    ///@notice input the decoder expects\n    ///@param token0Address address of first token of the pool\n    ///@param token1Address address of second token of the pool\n    ///@param fee fee tier of the pool\n    ///@param amount0In actual token0 amount to be deposited\n    ///@param amount1In actual token1 amount to be deposited\n    ///@param tickLower lower tick of position\n    ///@param tickUpper upper tick of position\n    struct SwapToPositionInput {\n        address token0Address;\n        address token1Address;\n        uint24 fee;\n        uint256 amount0In;\n        uint256 amount1In;\n        int24 tickLower;\n        int24 tickUpper;\n    }\n\n    function swapToPositionRatio(SwapToPositionInput memory inputs)\n        external\n        returns (uint256 amount0Out, uint256 amount1Out);\n}\n"
    },
    "contracts/actions/Mint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '../helpers/ERC20Helper.sol';\nimport '../utils/Storage.sol';\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/actions/IMint.sol';\n\n///@notice action to mint a UniswapV3 position NFT\ncontract Mint is IMint {\n    ///@notice emitted when a UniswapNFT is deposited in PositionManager\n    ///@param positionManager address of PositionManager\n    ///@param tokenId Id of deposited token\n    event PositionMinted(address indexed positionManager, uint256 tokenId);\n\n    ///@notice mints a UniswapV3 position NFT\n    ///@param inputs struct of MintInput parameters\n    ///@return tokenId ID of the minted NFT\n    ///@return amount0Deposited token0 amount deposited\n    ///@return amount1Deposited token1 amount deposited\n    function mint(MintInput calldata inputs)\n        public\n        override\n        returns (\n            uint256 tokenId,\n            uint256 amount0Deposited,\n            uint256 amount1Deposited\n        )\n    {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n\n        ERC20Helper._approveToken(\n            inputs.token0Address,\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress(),\n            inputs.amount0Desired\n        );\n        ERC20Helper._approveToken(\n            inputs.token1Address,\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress(),\n            inputs.amount1Desired\n        );\n\n        INonfungiblePositionManager.MintParams memory params = INonfungiblePositionManager.MintParams({\n            token0: inputs.token0Address,\n            token1: inputs.token1Address,\n            fee: inputs.fee,\n            tickLower: inputs.tickLower,\n            tickUpper: inputs.tickUpper,\n            amount0Desired: inputs.amount0Desired,\n            amount1Desired: inputs.amount1Desired,\n            amount0Min: 0,\n            amount1Min: 0,\n            recipient: address(this),\n            deadline: block.timestamp + 120\n        });\n\n        (tokenId, , amount0Deposited, amount1Deposited) = INonfungiblePositionManager(\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()\n        ).mint(params);\n\n        IPositionManager(address(this)).pushPositionId(tokenId);\n        emit PositionMinted(address(this), tokenId);\n    }\n}\n"
    },
    "contracts/test/helpers/MockERC20Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '../../helpers/ERC20Helper.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ncontract MockERC20Helper {\n    ///@notice library to interact with ERC20 helper for testing\n\n    ///@notice approve the token to be able to transfer it\n    ///@dev _approveToken(address token, address spender, uint256 amount)\n    ///@param token address of the token\n    ///@param spender address of the spender\n    ///@param amount amount to be approved\n    function approveToken(\n        address token,\n        address spender,\n        uint256 amount\n    ) public {\n        ERC20Helper._approveToken(token, spender, amount);\n    }\n\n    ///@notice transfer the token to the spender\n    ///@dev _getBalance(address token, address account)\n    ///@param token address of the token\n    ///@param account address of the owner\n    ///@return uint256 amount of the balance\n    function getBalance(address token, address account) public view returns (uint256) {\n        return ERC20Helper._getBalance(token, account);\n    }\n\n    ///@notice return the allowance of the token that spender is able to spend\n    ///@dev _getAllowance(address token, address owner, address spender)\n    ///@param token address of the token\n    ///@param owner address of the owner\n    ///@param spender address of the spender\n    ///@return uint256 amount of the allowance\n    function getAllowance(\n        address token,\n        address owner,\n        address spender\n    ) public view returns (uint256) {\n        return ERC20Helper._getAllowance(token, owner, spender);\n    }\n\n    ///@notice pull token if it is below the threshold of amount\n    ///@dev _pullTokensIfNeeded(address token, address from, uint256 amount)\n    ///@param token address of the token\n    ///@param from address of the from\n    ///@param amount address of the amount\n    ///@return uint256 amount of the token that was pulled\n    function pullTokensIfNeeded(\n        address token,\n        address from,\n        uint256 amount\n    ) public returns (uint256) {\n        return ERC20Helper._pullTokensIfNeeded(token, from, amount);\n    }\n\n    ///@notice withdraw the tokens from the vault and send them to the user\n    ///@dev _withdrawTokens(address token, address to, uint256 amount)\n    ///@param token address of the token\n    ///@param to address of the user\n    ///@param amount address of the balance\n    function withdrawTokens(\n        address token,\n        address to,\n        uint256 amount\n    ) public {\n        ERC20Helper._withdrawTokens(token, to, amount);\n    }\n\n    function approve(address token, address to) public {\n        IERC20(token).approve(to, 2**256 - 1);\n        IERC20(token).approve(address(this), 2**256 - 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\n/// @title Locks the registry for a minimum period of time\ncontract Timelock {\n    using SafeMath for uint256;\n\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint256 indexed newDelay);\n    event CancelTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event ExecuteTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event QueueTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n\n    uint256 public constant GRACE_PERIOD = 14 days;\n    uint256 public constant MINIMUM_DELAY = 6 hours;\n    uint256 public constant MAXIMUM_DELAY = 30 days;\n\n    uint256 public delay;\n    address public admin;\n    address public pendingAdmin;\n    mapping(address => bool) public pendingAdminAccepted;\n    mapping(bytes32 => bool) public queuedTransactions;\n\n    constructor(address _admin, uint256 _delay) {\n        require(_delay >= MINIMUM_DELAY, 'Timelock::constructor: Delay must exceed minimum delay.');\n        require(_delay <= MAXIMUM_DELAY, 'Timelock::constructor: Delay must not exceed maximum delay.');\n\n        admin = _admin;\n        delay = _delay;\n    }\n\n    /// @notice Sets the minimum time delay\n    /// @param _delay the new delay\n    function setDelay(uint256 _delay) public onlyAdmin {\n        require(_delay >= MINIMUM_DELAY, 'Timelock::setDelay: Delay must exceed minimum delay.');\n        require(_delay <= MAXIMUM_DELAY, 'Timelock::setDelay: Delay must not exceed maximum delay.');\n        delay = _delay;\n\n        emit NewDelay(delay);\n    }\n\n    /// @notice Sets a new address as pending admin\n    /// @param _pendingAdmin the pending admin\n    function setNewPendingAdmin(address _pendingAdmin) public onlyAdmin {\n        pendingAdmin = _pendingAdmin;\n        pendingAdminAccepted[_pendingAdmin] = false;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    /// @notice Pending admin accepts its role of new admin\n    function acceptAdminRole() public {\n        require(msg.sender == pendingAdmin, 'Timelock::acceptAdminRole: Call must come from pendingAdmin.');\n        pendingAdminAccepted[msg.sender] = true;\n    }\n\n    /// @notice Confirms the pending admin as new admin after he accepted the role\n    function confirmNewAdmin() public onlyAdmin {\n        require(\n            pendingAdminAccepted[pendingAdmin],\n            'Timelock::confirmNewAdmin: Pending admin must accept admin role first.'\n        );\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n        pendingAdminAccepted[pendingAdmin] = false;\n\n        emit NewAdmin(admin);\n    }\n\n    /// @notice queues a transaction to be executed after the delay passed\n    /// @param target the target contract address\n    /// @param value the value to be sent\n    /// @param signature the signature of the transaction to be enqueued\n    /// @param data the data of the transaction to be enqueued\n    /// @param eta the minimum timestamp at which the transaction can be executed\n    /// @return the hash of the transaction in bytes\n    function queueTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public onlyAdmin returns (bytes32) {\n        require(\n            eta >= getBlockTimestamp().add(delay),\n            'Timelock::queueTransaction: Estimated execution block must satisfy delay.'\n        );\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    /// @notice cancels a transaction that has been queued\n    /// @param target the target contract address\n    /// @param value the value to be sent\n    /// @param signature the signature of the transaction to be enqueued\n    /// @param data the data of the transaction to be enqueued\n    /// @param eta the minimum timestamp at which the transaction can be executed\n    function cancelTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public onlyAdmin {\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    /// @notice executes a transaction that has been queued\n    /// @param target the target contract address\n    /// @param value the value to be sent\n    /// @param signature the signature of the transaction to be enqueued\n    /// @param data the data of the transaction to be enqueued\n    /// @param eta the minimum timestamp at which the transaction can be executed\n    /// @return the bytes returned by the call method\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public payable onlyAdmin returns (bytes memory) {\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), 'Timelock::executeTransaction: Transaction is stale.');\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\n        require(success, 'Timelock::executeTransaction: Transaction execution reverted.');\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }\n\n    /// @notice gets the current block timestamp\n    /// @return the current block timestamp\n    function getBlockTimestamp() internal view returns (uint256) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n\n    /// @notice modifier to check if the sender is the admin\n    modifier onlyAdmin() {\n        require(msg.sender == admin, 'Timelock::onlyAdmin: Call must come from admin.');\n        _;\n    }\n}\n"
    },
    "contracts/test/TestRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol';\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\n\n/**\n * @title  TestRouter\n * @dev    DO NOT USE IN PRODUCTION. This is only intended to be used for\n *         tests and lacks slippage and callback caller checks.\n */\ncontract TestRouter is IUniswapV3MintCallback, IUniswapV3SwapCallback {\n    using SafeERC20 for IERC20;\n\n    function mint(\n        IUniswapV3Pool pool,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256, uint256) {\n        int24 tickSpacing = pool.tickSpacing();\n        require(tickLower % tickSpacing == 0, 'tickLower must be a multiple of tickSpacing');\n        require(tickUpper % tickSpacing == 0, 'tickUpper must be a multiple of tickSpacing');\n        return pool.mint(msg.sender, tickLower, tickUpper, amount, abi.encode(msg.sender));\n    }\n\n    function swap(\n        IUniswapV3Pool pool,\n        bool zeroForOne,\n        int256 amountSpecified\n    ) external returns (int256, int256) {\n        return\n            pool.swap(\n                msg.sender,\n                zeroForOne,\n                amountSpecified,\n                zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1,\n                abi.encode(msg.sender)\n            );\n    }\n\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external override {\n        _callback(amount0Owed, amount1Owed, data);\n    }\n\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external override {\n        uint256 amount0 = amount0Delta > 0 ? uint256(amount0Delta) : 0;\n        uint256 amount1 = amount1Delta > 0 ? uint256(amount1Delta) : 0;\n        _callback(amount0, amount1, data);\n    }\n\n    function _callback(\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) internal {\n        IUniswapV3Pool pool = IUniswapV3Pool(msg.sender);\n        address payer = abi.decode(data, (address));\n\n        IERC20(pool.token0()).safeTransferFrom(payer, msg.sender, amount0);\n        IERC20(pool.token1()).safeTransferFrom(payer, msg.sender, amount1);\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#mint\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\ninterface IUniswapV3MintCallback {\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/helpers/SwapHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol';\n\n///@title library to help with swap amounts calculations\nlibrary SwapHelper {\n    ///@notice calculate the ratio of the token amounts for a given position\n    ///@param tickPool tick of the pool\n    ///@param tickLower lower tick of position\n    ///@param tickUpper upper tick of position\n    ///@return ratioE18 amount1/amount0 * 1e18\n    function getRatioFromRange(\n        int24 tickPool,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal pure returns (uint256 ratioE18) {\n        require(tickLower < tickPool && tickUpper > tickPool, 'Position should be in range to call this function');\n        uint256 amount0 = 1e18;\n        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(tickPool);\n        uint160 sqrtPriceLowerX96 = TickMath.getSqrtRatioAtTick(tickLower);\n        uint160 sqrtPriceUpperX96 = TickMath.getSqrtRatioAtTick(tickUpper);\n        uint128 liquidity = LiquidityAmounts.getLiquidityForAmount0(sqrtPriceX96, sqrtPriceUpperX96, amount0);\n        ratioE18 = LiquidityAmounts.getAmount1ForLiquidity(sqrtPriceX96, sqrtPriceLowerX96, liquidity);\n    }\n\n    ///@notice calculate amount to be swapped in order to deposit according to the ratio selected position needs\n    ///@param tickPool tick of the pool\n    ///@param tickLower lower tick of position\n    ///@param tickUpper upper tick of position\n    ///@param amount0In amount of token0 available\n    ///@param amount1In amount of token1 available\n    ///@return amountToSwap amount of token to be swapped\n    ///@return token0In true if token0 is swapped for token1, false if token1 is swapped for token1\n    function calcAmountToSwap(\n        int24 tickPool,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 amount0In,\n        uint256 amount1In\n    ) internal pure returns (uint256 amountToSwap, bool token0In) {\n        require(amount0In > 0 || amount1In > 0);\n        if (tickPool <= tickLower) {\n            amountToSwap = amount0In;\n            token0In = true;\n        } else if (tickPool >= tickUpper) {\n            amountToSwap = amount1In;\n            token0In = false;\n        } else {\n            uint256 ratioE18 = getRatioFromRange(tickPool, tickLower, tickUpper);\n\n            uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(tickPool);\n\n            uint256 valueX96 = (amount0In * ((uint256(sqrtPriceX96)**2) >> FixedPoint96.RESOLUTION)) +\n                (amount1In << FixedPoint96.RESOLUTION);\n\n            uint256 amount1PostX96 = (ratioE18 * valueX96) / (ratioE18 + 1e18);\n\n            token0In = !(amount1In >= (amount1PostX96 >> FixedPoint96.RESOLUTION));\n            if (token0In) {\n                amountToSwap =\n                    (((amount1PostX96 - (amount1In << FixedPoint96.RESOLUTION)) / sqrtPriceX96) <<\n                        FixedPoint96.RESOLUTION) /\n                    sqrtPriceX96;\n            } else {\n                amountToSwap = amount1In - (amount1PostX96 >> FixedPoint96.RESOLUTION);\n            }\n        }\n    }\n}\n"
    },
    "contracts/test/helpers/MockSwapHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '../../helpers/SwapHelper.sol';\n\ncontract MockSwapHelper {\n    ///@notice call to getRatioFromRange of SwapHelper library\n    ///@param tickPool tick of the pool\n    ///@param tickLower lower tick of position\n    ///@param tickUpper upper tick of position\n    ///@return uint256 ratioE18 = amount1/amount0 * 1e18\n    function getRatioFromRange(\n        int24 tickPool,\n        int24 tickLower,\n        int24 tickUpper\n    ) public pure returns (uint256) {\n        return SwapHelper.getRatioFromRange(tickPool, tickLower, tickUpper);\n    }\n\n    ///@notice call to calcAmountToSwap of SwapHelper library\n    ///@param tickPool tick of the pool\n    ///@param tickLower lower tick of position\n    ///@param tickUpper upper tick of position\n    ///@param amount0In amount of token0 available\n    ///@param amount1In amount of token1 available\n    ///@return uint256 amountToSwap = amount of token to be swapped\n    ///@return bool amount0In = true if token0 is swapped for token1, false if token1 is swapped for token1\n    function calcAmountToSwap(\n        int24 tickPool,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 amount0In,\n        uint256 amount1In\n    ) public pure returns (uint256, bool) {\n        return SwapHelper.calcAmountToSwap(tickPool, tickLower, tickUpper, amount0In, amount1In);\n    }\n}\n"
    },
    "contracts/actions/ZapIn.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\nimport '../helpers/UniswapNFTHelper.sol';\nimport '../helpers/SwapHelper.sol';\nimport '../helpers/ERC20Helper.sol';\nimport '../utils/Storage.sol';\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/actions/IZapIn.sol';\n\ncontract ZapIn is IZapIn {\n    ///@notice emitted when a UniswapNFT is zapped in\n    ///@param positionManager address of PositionManager\n    ///@param tokenId Id of zapped token\n    ///@param tokenIn address of token zapped in\n    ///@param amountIn amount of tokenIn zapped in\n    event ZappedIn(address indexed positionManager, uint256 tokenId, address tokenIn, uint256 amountIn);\n\n    ///@notice mints a uni NFT with a single input token, the token in input can be different from the two position tokens\n    ///@param tokenIn address of input token\n    ///@param amountIn amount of input token\n    ///@param token0 address token0 of the pool\n    ///@param token1 address token1 of the pool\n    ///@param tickLower lower bound of desired position\n    ///@param tickUpper upper bound of desired position\n    ///@param fee fee tier of the pool\n    ///@return tokenId of minted NFT\n    function zapIn(\n        address tokenIn,\n        uint256 amountIn,\n        address token0,\n        address token1,\n        int24 tickLower,\n        int24 tickUpper,\n        uint24 fee\n    ) public override returns (uint256 tokenId) {\n        require(token0 != token1, 'ZapIn::zapIn: token0 and token1 cannot be the same');\n        (token0, token1) = _reorderTokens(token0, token1);\n\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        ERC20Helper._pullTokensIfNeeded(tokenIn, Storage.owner, amountIn);\n\n        ERC20Helper._approveToken(tokenIn, Storage.uniswapAddressHolder.swapRouterAddress(), amountIn);\n\n        (, int24 tickPool, , , , , ) = IUniswapV3Pool(\n            UniswapNFTHelper._getPool(Storage.uniswapAddressHolder.uniswapV3FactoryAddress(), token0, token1, fee)\n        ).slot0();\n\n        uint256 amountInTo0 = (amountIn * 1e18) / (SwapHelper.getRatioFromRange(tickPool, tickLower, tickUpper) + 1e18);\n        uint256 amountInTo1 = amountIn - amountInTo0;\n\n        ERC20Helper._approveToken(tokenIn, Storage.uniswapAddressHolder.swapRouterAddress(), amountIn);\n        //if token in input is not the token0 of the pool, we need to swap it\n        if (tokenIn != token0) {\n            amountInTo0 = ISwapRouter(Storage.uniswapAddressHolder.swapRouterAddress()).exactInputSingle(\n                ISwapRouter.ExactInputSingleParams({\n                    tokenIn: tokenIn,\n                    tokenOut: token0,\n                    fee: fee,\n                    recipient: address(this),\n                    deadline: block.timestamp + 120,\n                    amountIn: amountInTo0,\n                    amountOutMinimum: 1,\n                    sqrtPriceLimitX96: 0\n                })\n            );\n        }\n\n        //if token in input is not the token1 of the pool, we need to swap it\n        if (tokenIn != token1) {\n            ERC20Helper._approveToken(tokenIn, Storage.uniswapAddressHolder.swapRouterAddress(), amountIn);\n            amountInTo1 = ISwapRouter(Storage.uniswapAddressHolder.swapRouterAddress()).exactInputSingle(\n                ISwapRouter.ExactInputSingleParams({\n                    tokenIn: tokenIn,\n                    tokenOut: token1,\n                    fee: fee,\n                    recipient: address(this),\n                    deadline: block.timestamp + 120,\n                    amountIn: amountInTo1,\n                    amountOutMinimum: 1,\n                    sqrtPriceLimitX96: 0\n                })\n            );\n        }\n\n        (tokenId, , ) = _mint(token0, token1, fee, tickLower, tickUpper, amountInTo0, amountInTo1);\n\n        emit ZappedIn(address(this), tokenId, tokenIn, amountIn);\n    }\n\n    ///@notice mints a UniswapV3 position NFT\n    ///@param token0Address address of the first token\n    ///@param token1Address address of the second token\n    ///@param fee pool fee level\n    ///@param tickLower lower tick of the position\n    ///@param tickUpper upper tick of the position\n    ///@param amount0Desired amount of first token in position\n    ///@param amount1Desired amount of second token in position\n    function _mint(\n        address token0Address,\n        address token1Address,\n        uint24 fee,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    )\n        internal\n        returns (\n            uint256 tokenId,\n            uint256 amount0Deposited,\n            uint256 amount1Deposited\n        )\n    {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n\n        ERC20Helper._approveToken(\n            token0Address,\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress(),\n            amount0Desired\n        );\n        ERC20Helper._approveToken(\n            token1Address,\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress(),\n            amount1Desired\n        );\n\n        INonfungiblePositionManager.MintParams memory params = INonfungiblePositionManager.MintParams({\n            token0: token0Address,\n            token1: token1Address,\n            fee: fee,\n            tickLower: tickLower,\n            tickUpper: tickUpper,\n            amount0Desired: amount0Desired,\n            amount1Desired: amount1Desired,\n            amount0Min: 0,\n            amount1Min: 0,\n            recipient: address(this),\n            deadline: block.timestamp + 120\n        });\n\n        (tokenId, , amount0Deposited, amount1Deposited) = INonfungiblePositionManager(\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()\n        ).mint(params);\n\n        IPositionManager(address(this)).pushPositionId(tokenId);\n    }\n\n    ///@notice orders token addresses\n    ///@param token0 address of token0\n    ///@param token1 address of token1\n    ///@return address first token address\n    ///@return address second token address\n    function _reorderTokens(address token0, address token1) internal pure returns (address, address) {\n        if (token0 > token1) {\n            return (token1, token0);\n        } else {\n            return (token0, token1);\n        }\n    }\n}\n"
    },
    "contracts/test/helpers/MockUniswapNFTHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '../../helpers/UniswapNFTHelper.sol';\n\ncontract MockUniswapNFTHelper {\n    ///@notice contract to interact with NFT helper for testing\n\n    ///@notice get the pool address\n    ///@param factory address of the UniswapV3Factory\n    ///@param token0 address of the token0\n    ///@param token1 address of the token1\n    ///@param fee fee tier of the pool\n    ///@return address address of the pool\n    function getPool(\n        address factory,\n        address token0,\n        address token1,\n        uint24 fee\n    ) public pure returns (address) {\n        return UniswapNFTHelper._getPool(factory, token0, token1, fee);\n    }\n\n    ///@notice get the address of the pool from the tokenId\n    ///@param tokenId id of the position (NFT)\n    ///@param nonfungiblePositionManager instance of the nonfungiblePositionManager given by the caller (address)\n    ///@param factory address of the UniswapV3Factory\n    ///@return address address of the pool\n    function getPoolFromTokenId(\n        uint256 tokenId,\n        INonfungiblePositionManager nonfungiblePositionManager,\n        address factory\n    ) public view returns (address) {\n        return UniswapNFTHelper._getPoolFromTokenId(tokenId, nonfungiblePositionManager, factory);\n    }\n\n    ///@notice get the address of the tpkens from the tokenId\n    ///@param tokenId id of the position (NFT)\n    ///@param nonfungiblePositionManager instance of the nonfungiblePositionManager given by the caller (address)\n    ///@return token0address address of the token0\n    ///@return token1address address of the token1\n    ///@return fee fee tier of the pool\n    ///@return tickLower of position\n    ///@return tickUpper of position\n    function getTokens(uint256 tokenId, INonfungiblePositionManager nonfungiblePositionManager)\n        public\n        view\n        returns (\n            address token0address,\n            address token1address,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper\n        )\n    {\n        return UniswapNFTHelper._getTokens(tokenId, nonfungiblePositionManager);\n    }\n\n    ///@notice get the amount of tokens in a position\n    ///@param tokenId id of the position (NFT)\n    ///@param nonfungiblePositionManager instance of the nonfungiblePositionManager given by the caller (address)\n    ///@param factory address of the UniswapV3Factory\n    ///@return uint256 amount of token0\n    ///@return uint256 amount of token1\n    function getAmountsfromTokenId(\n        uint256 tokenId,\n        INonfungiblePositionManager nonfungiblePositionManager,\n        address factory\n    ) public view returns (uint256, uint256) {\n        return UniswapNFTHelper._getAmountsfromTokenId(tokenId, nonfungiblePositionManager, factory);\n    }\n\n    ///@notice get the amount of tokens from liquidity and tick ranges\n    ///@param liquidity amount of liquidity to convert\n    ///@param tickLower lower tick range\n    ///@param tickUpper upper tick range\n    ///@param poolAddress address of the pool\n    ///@return uint256 amount of token0\n    ///@return uint256 amount of token1\n    function getAmountsFromLiquidity(\n        uint128 liquidity,\n        int24 tickLower,\n        int24 tickUpper,\n        address poolAddress\n    ) public view returns (uint256, uint256) {\n        return UniswapNFTHelper._getAmountsFromLiquidity(liquidity, tickLower, tickUpper, poolAddress);\n    }\n\n    ///@notice Computes the amount of liquidity for a given amount of token0, token1\n    ///@param token0 The amount of token0 being sent in\n    ///@param token1 The amount of token1 being sent in\n    ///@param tickLower lower tick range\n    ///@param tickUpper upper tick range\n    ///@param poolAddress The address of the pool\n    ///@return uint128 The amount of liquidity received\n    function getLiquidityFromAmounts(\n        uint256 token0,\n        uint256 token1,\n        int24 tickLower,\n        int24 tickUpper,\n        address poolAddress\n    ) public view returns (uint128) {\n        return UniswapNFTHelper._getLiquidityFromAmounts(token0, token1, tickLower, tickUpper, poolAddress);\n    }\n}\n"
    },
    "contracts/modules/AutoCompoundModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/IUniswapAddressHolder.sol';\nimport '../../interfaces/actions/ICollectFees.sol';\nimport '../../interfaces/actions/IIncreaseLiquidity.sol';\nimport '../../interfaces/actions/IUpdateUncollectedFees.sol';\nimport '../helpers/UniswapNFTHelper.sol';\nimport '../utils/Storage.sol';\n\ncontract AutoCompoundModule {\n    IUniswapAddressHolder addressHolder;\n\n    ///@notice constructor of autoCompoundModule\n    ///@param _addressHolder the address of the uniswap address holder contract\n    constructor(address _addressHolder) {\n        addressHolder = IUniswapAddressHolder(_addressHolder);\n    }\n\n    ///@notice executes our recipe for autocompounding\n    ///@param positionManager address of the position manager\n    ///@param tokenId id of the token to autocompound\n    function autoCompoundFees(IPositionManager positionManager, uint256 tokenId) public {\n        ///@dev check if autocompound is active\n        if (positionManager.getModuleState(tokenId, address(this))) {\n            ///@dev check if compound need to be done\n            if (_checkIfCompoundIsNeeded(address(positionManager), tokenId)) {\n                (uint256 amount0Desired, uint256 amount1Desired) = ICollectFees(address(positionManager)).collectFees(\n                    tokenId,\n                    false\n                );\n\n                IIncreaseLiquidity(address(positionManager)).increaseLiquidity(tokenId, amount0Desired, amount1Desired);\n            }\n        }\n    }\n\n    ///@notice checks the position status\n    ///@param positionManagerAddress address of the position manager\n    ///@param tokenId token id of the position\n    ///@return true if the position needs to be collected\n    function _checkIfCompoundIsNeeded(address positionManagerAddress, uint256 tokenId) internal returns (bool) {\n        (uint256 uncollectedFees0, uint256 uncollectedFees1) = IUpdateUncollectedFees(positionManagerAddress)\n            .updateUncollectedFees(tokenId);\n\n        (uint256 amount0, uint256 amount1) = UniswapNFTHelper._getAmountsfromTokenId(\n            tokenId,\n            INonfungiblePositionManager(addressHolder.nonfungiblePositionManagerAddress()),\n            addressHolder.uniswapV3FactoryAddress()\n        );\n\n        uint256 feesThreshold = abi.decode(\n            IPositionManager(positionManagerAddress).getModuleData(tokenId, address(this)),\n            (uint256)\n        );\n\n        (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3Pool(\n            UniswapNFTHelper._getPoolFromTokenId(\n                tokenId,\n                INonfungiblePositionManager(addressHolder.nonfungiblePositionManagerAddress()),\n                addressHolder.uniswapV3FactoryAddress()\n            )\n        ).slot0();\n        //returns true if the value of uncollected fees * 100 is greater than amount in the position * threshold\n        return (((uncollectedFees0 * sqrtPriceX96) / 2**96 + (uncollectedFees1 * 2**96) / sqrtPriceX96) * 100 >\n            ((amount0 * sqrtPriceX96) / 2**96 + (amount1 * 2**96) / sqrtPriceX96) * feesThreshold);\n    }\n}\n"
    },
    "interfaces/actions/IIncreaseLiquidity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IIncreaseLiquidity {\n    function increaseLiquidity(\n        uint256 tokenId,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    ) external;\n}\n"
    },
    "interfaces/actions/IUpdateUncollectedFees.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IUpdateUncollectedFees {\n    function updateUncollectedFees(uint256 tokenId) external returns (uint256, uint256);\n}\n"
    },
    "contracts/actions/UpdateUncollectedFees.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '../utils/Storage.sol';\nimport '../../interfaces/actions/IUpdateUncollectedFees.sol';\n\ncontract UpdateUncollectedFees is IUpdateUncollectedFees {\n    ///@notice emitted when a UniswapNFT position is updated\n    ///@param positionManager address of PositionManager\n    ///@param tokenId Id of the updated position\n    ///@param token0 fee collected\n    ///@param token1 fee collected\n    event FeesUpdated(address indexed positionManager, uint256 tokenId, uint256 token0, uint256 token1);\n\n    ///@notice update the uncollected fees of a UniswapV3 position NFT\n    ///@param tokenId ID of the NFT\n    ///@return uint256 token0 fee collected\n    ///@return uint256 token1 fee collected\n    function updateUncollectedFees(uint256 tokenId) public override returns (uint256, uint256) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n\n        INonfungiblePositionManager nonfungiblePositionManager = INonfungiblePositionManager(\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()\n        );\n\n        nonfungiblePositionManager.decreaseLiquidity(\n            INonfungiblePositionManager.DecreaseLiquidityParams({\n                tokenId: tokenId,\n                liquidity: 1,\n                amount0Min: 0,\n                amount1Min: 0,\n                deadline: block.timestamp + 120\n            })\n        );\n\n        (, , , , , , , , , , uint128 tokensOwed0, uint128 tokensOwed1) = nonfungiblePositionManager.positions(tokenId);\n        emit FeesUpdated(address(this), tokenId, tokensOwed0, tokensOwed1);\n        return (tokensOwed0, tokensOwed1);\n    }\n}\n"
    },
    "contracts/test/UniswapImports.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/actions/SwapToPositionRatio.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '../helpers/SwapHelper.sol';\nimport '../helpers/UniswapNFTHelper.sol';\nimport '../helpers/ERC20Helper.sol';\nimport '../utils/Storage.sol';\nimport '../../interfaces/actions/ISwapToPositionRatio.sol';\n\n///@notice action to swap to an exact position ratio\ncontract SwapToPositionRatio is ISwapToPositionRatio {\n    ///@notice emitted when a positionManager swaps to ratio\n    ///@param positionManager address of PositionManager\n    ///@param token0 address of first token of the pool\n    ///@param token1 address of second token of the pool\n    ///@param amount0Out token0 amount swapped\n    ///@param amount1Out token1 amount swapped\n    event SwappedToPositionRatio(\n        address indexed positionManager,\n        address token0,\n        address token1,\n        uint256 amount0Out,\n        uint256 amount1Out\n    );\n\n    ///@notice performs swap to optimal ratio for the position at tickLower and tickUpper\n    ///@param inputs input bytes to be decoded according to SwapToPositionInput\n    ///@param amount0Out the new value of amount0\n    ///@param amount1Out the new value of amount1\n    function swapToPositionRatio(SwapToPositionInput memory inputs)\n        public\n        override\n        returns (uint256 amount0Out, uint256 amount1Out)\n    {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n\n        address poolAddress = UniswapNFTHelper._getPool(\n            Storage.uniswapAddressHolder.uniswapV3FactoryAddress(),\n            inputs.token0Address,\n            inputs.token1Address,\n            inputs.fee\n        );\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\n        (, int24 tickPool, , , , , ) = pool.slot0();\n        (uint256 amountToSwap, bool token0AddressIn) = SwapHelper.calcAmountToSwap(\n            tickPool,\n            inputs.tickLower,\n            inputs.tickUpper,\n            inputs.amount0In,\n            inputs.amount1In\n        );\n\n        if (amountToSwap != 0) {\n            uint256 amountSwapped = swap(\n                token0AddressIn ? inputs.token0Address : inputs.token1Address,\n                token0AddressIn ? inputs.token1Address : inputs.token0Address,\n                inputs.fee,\n                amountToSwap\n            );\n\n            ///@notice return the new amount of the token swapped and the token returned\n            ///@dev token0AddressIn true amount 0 - amountToSwap  ------ amount 1 + amountSwapped\n            ///@dev token0AddressIn false amount 0 + amountSwapped  ------ amount 1 - amountToSwap\n            amount0Out = token0AddressIn ? inputs.amount0In - amountToSwap : inputs.amount0In + amountSwapped;\n            amount1Out = token0AddressIn ? inputs.amount1In + amountSwapped : inputs.amount1In - amountToSwap;\n        } else {\n            amount0Out = inputs.amount0In;\n            amount1Out = inputs.amount1In;\n        }\n        emit SwappedToPositionRatio(address(this), inputs.token0Address, inputs.token1Address, amount0Out, amount1Out);\n    }\n\n    ///@notice swaps token0 for token1\n    ///@param token0Address address of first token\n    ///@param token1Address address of second token\n    ///@param fee fee tier of the pool\n    ///@param amount0In amount of token0 to swap\n    function swap(\n        address token0Address,\n        address token1Address,\n        uint24 fee,\n        uint256 amount0In\n    ) internal returns (uint256 amount1Out) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        ISwapRouter swapRouter = ISwapRouter(Storage.uniswapAddressHolder.swapRouterAddress());\n\n        ERC20Helper._approveToken(token0Address, address(swapRouter), 2**256 - 1);\n        ERC20Helper._approveToken(token1Address, address(swapRouter), 2**256 - 1);\n\n        ISwapRouter.ExactInputSingleParams memory swapParams = ISwapRouter.ExactInputSingleParams({\n            tokenIn: token0Address,\n            tokenOut: token1Address,\n            fee: fee,\n            recipient: address(this),\n            deadline: block.timestamp + 120,\n            amountIn: amount0In,\n            amountOutMinimum: 0,\n            sqrtPriceLimitX96: 0\n        });\n\n        amount1Out = swapRouter.exactInputSingle(swapParams);\n    }\n}\n"
    },
    "contracts/modules/AaveModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '../helpers/UniswapNFTHelper.sol';\nimport '../../interfaces/IAaveAddressHolder.sol';\nimport '../../interfaces/IUniswapAddressHolder.sol';\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/actions/IAaveDeposit.sol';\nimport '../../interfaces/actions/IAaveWithdraw.sol';\nimport '../../interfaces/actions/IDecreaseLiquidity.sol';\nimport '../../interfaces/actions/ICollectFees.sol';\nimport '../../interfaces/actions/ISwap.sol';\nimport '../../interfaces/actions/ISwapToPositionRatio.sol';\nimport '../../interfaces/actions/IIncreaseLiquidity.sol';\n\ncontract AaveModule {\n    IAaveAddressHolder public aaveAddressHolder;\n    IUniswapAddressHolder uniswapAddressHolder;\n\n    modifier activeModule(address positionManager, uint256 tokenId) {\n        require(\n            IPositionManager(positionManager).getModuleState(tokenId, address(this)),\n            'AaveModule::activeModule: Module is inactive.'\n        );\n        _;\n    }\n\n    constructor(address _aaveAddressHolder, address _uniswapAddressHolder) {\n        aaveAddressHolder = IAaveAddressHolder(_aaveAddressHolder);\n        uniswapAddressHolder = IUniswapAddressHolder(_uniswapAddressHolder);\n    }\n\n    ///@notice deposit a position in an Aave lending pool\n    ///@param positionManager address of the position manager\n    ///@param tokenId id of the Uniswap position to deposit\n    function depositIfNeeded(address positionManager, uint256 tokenId) public activeModule(positionManager, tokenId) {\n        address toAaveToken = abi.decode(\n            IPositionManager(positionManager).getModuleData(tokenId, address(this)),\n            (address)\n        );\n        ///@dev move token to aave only if the position's range is outside of the tick of the pool\n        if (_checkDistanceFromRange(tokenId) > 0) {\n            _depositToAave(positionManager, tokenId, toAaveToken);\n        }\n    }\n\n    ///@notice check if withdraw is needed and execute\n    ///@param positionManager address of the position manager\n    ///@param token address of the token of Aave position\n    ///@param id id of the Aave position to withdraw\n    function withdrawIfNeeded(\n        address positionManager,\n        address token,\n        uint256 id\n    ) public {\n        uint256 tokenId = IPositionManager(positionManager).getTokenIdFromAavePosition(token, id);\n        (, int24 tickPool, , , , , ) = IUniswapV3Pool(\n            UniswapNFTHelper._getPoolFromTokenId(\n                tokenId,\n                INonfungiblePositionManager(uniswapAddressHolder.nonfungiblePositionManagerAddress()),\n                uniswapAddressHolder.uniswapV3FactoryAddress()\n            )\n        ).slot0();\n\n        (, , , int24 tickLower, int24 tickUpper) = UniswapNFTHelper._getTokens(\n            tokenId,\n            INonfungiblePositionManager(uniswapAddressHolder.nonfungiblePositionManagerAddress())\n        );\n        if (tickPool > tickLower && tickPool < tickUpper) {\n            _returnToUniswap(positionManager, token, id, tokenId);\n        }\n    }\n\n    ///@notice deposit a uni v3 position to an Aave lending pool\n    ///@param positionManager address of the position manager\n    ///@param tokenId id of the Uniswap position to deposit\n    ///@param toAaveToken address of the token to deposit to Aave\n    function _depositToAave(\n        address positionManager,\n        uint256 tokenId,\n        address toAaveToken\n    ) internal {\n        (, , address token0, address token1, , , , , , , , ) = INonfungiblePositionManager(\n            uniswapAddressHolder.nonfungiblePositionManagerAddress()\n        ).positions(tokenId);\n\n        (uint256 amount0ToDecrease, uint256 amount1ToDecrease) = UniswapNFTHelper._getAmountsfromTokenId(\n            tokenId,\n            INonfungiblePositionManager(uniswapAddressHolder.nonfungiblePositionManagerAddress()),\n            uniswapAddressHolder.uniswapV3FactoryAddress()\n        );\n\n        IDecreaseLiquidity(positionManager).decreaseLiquidity(tokenId, amount0ToDecrease, amount1ToDecrease);\n        (uint256 amount0Collected, uint256 amount1Collected) = ICollectFees(positionManager).collectFees(\n            tokenId,\n            false\n        );\n\n        uint256 amountToAave = 0;\n        if (amount0Collected > 0) {\n            if (token0 == toAaveToken) {\n                amountToAave += amount0Collected;\n            } else {\n                amountToAave += ISwap(positionManager).swap(\n                    token0,\n                    toAaveToken,\n                    _findBestFee(token0, toAaveToken),\n                    amount0Collected\n                );\n            }\n        }\n\n        if (amount1Collected > 0) {\n            if (token1 == toAaveToken) {\n                amountToAave += amount1Collected;\n            } else {\n                amountToAave += ISwap(positionManager).swap(\n                    token1,\n                    toAaveToken,\n                    _findBestFee(token1, toAaveToken),\n                    amount1Collected\n                );\n            }\n        }\n\n        (uint256 id, ) = IAaveDeposit(positionManager).depositToAave(toAaveToken, amountToAave);\n\n        IPositionManager(positionManager).pushTokenIdToAave(toAaveToken, id, tokenId);\n        IPositionManager(positionManager).removePositionId(tokenId);\n    }\n\n    ///@notice return a position to Uniswap\n    ///@param positionManager address of the position manager\n    ///@param token address of the token of Aave position\n    ///@param id id of the Aave position to withdraw\n    function _returnToUniswap(\n        address positionManager,\n        address token,\n        uint256 id,\n        uint256 tokenId\n    ) internal {\n        uint256 amountWithdrawn = IAaveWithdraw(positionManager).withdrawFromAave(token, id);\n        (address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper) = UniswapNFTHelper._getTokens(\n            tokenId,\n            INonfungiblePositionManager(uniswapAddressHolder.nonfungiblePositionManagerAddress())\n        );\n\n        uint256 amount0In = ISwap(positionManager).swap(token, token0, fee, amountWithdrawn);\n\n        (uint256 amount0Out, uint256 amount1Out) = ISwapToPositionRatio(positionManager).swapToPositionRatio(\n            ISwapToPositionRatio.SwapToPositionInput({\n                token0Address: token0,\n                token1Address: token1,\n                fee: fee,\n                amount0In: amount0In,\n                amount1In: 0,\n                tickLower: tickLower,\n                tickUpper: tickUpper\n            })\n        );\n\n        IIncreaseLiquidity(positionManager).increaseLiquidity(tokenId, amount0Out, amount1Out);\n        IPositionManager(positionManager).pushPositionId(tokenId);\n    }\n\n    ///@notice checkDistance from ticklower tickupper from tick of the pools\n    ///@param tokenId tokenId of the position\n    ///@return int24 distance from ticklower tickupper from tick of the pools and return the minimum distance\n    function _checkDistanceFromRange(uint256 tokenId) internal view returns (uint24) {\n        (\n            ,\n            ,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            ,\n            ,\n            ,\n            ,\n\n        ) = INonfungiblePositionManager(address(uniswapAddressHolder.nonfungiblePositionManagerAddress())).positions(\n                tokenId\n            );\n\n        IUniswapV3Pool pool = IUniswapV3Pool(\n            UniswapNFTHelper._getPool(address(uniswapAddressHolder.uniswapV3FactoryAddress()), token0, token1, fee)\n        );\n        (, int24 tick, , , , , ) = pool.slot0();\n\n        if (tick > tickUpper) {\n            return uint24(tick - tickUpper);\n        } else if (tick < tickLower) {\n            return uint24(tickLower - tick);\n        } else {\n            return 0;\n        }\n    }\n\n    ///@notice finds the best fee tier on which to perform a swap\n    ///@param token0 address of first token\n    ///@param token1 address of second token\n    ///@return fee suggested fee tier\n    function _findBestFee(address token0, address token1) internal view returns (uint24 fee) {\n        uint128 bestLiquidity = 0;\n        uint16[4] memory fees = [100, 500, 3000, 10000];\n\n        for (uint8 i = 0; i < 4; i++) {\n            try this.getPoolLiquidity(token0, token1, uint24(fees[i])) returns (uint128 nextLiquidity) {\n                if (nextLiquidity > bestLiquidity) {\n                    bestLiquidity = nextLiquidity;\n                    fee = fees[i];\n                }\n            } catch {\n                //pass\n            }\n        }\n\n        if (bestLiquidity == 0) {\n            revert('AaveModule::_findBestFee: No pool found with desired tokens');\n        }\n    }\n\n    ///@notice wrapper of getPoolLiquidity to use try/catch statement\n    ///@param token0 address of first token\n    ///@param token1 address of second token\n    ///@param fee pool fee tier\n    ///@return liquidity of the pool\n    function getPoolLiquidity(\n        address token0,\n        address token1,\n        uint24 fee\n    ) public view returns (uint128 liquidity) {\n        return\n            IUniswapV3Pool(\n                UniswapNFTHelper._getPool(uniswapAddressHolder.uniswapV3FactoryAddress(), token0, token1, fee)\n            ).liquidity();\n    }\n}\n"
    },
    "interfaces/actions/IAaveWithdraw.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IAaveWithdraw {\n    ///@notice withdraw from aave some token amount\n    ///@param token token address\n    ///@param id position to withdraw from\n    ///@return amountWithdrawn amount of token withdrawn from aave\n    function withdrawFromAave(address token, uint256 id) external returns (uint256 amountWithdrawn);\n}\n"
    },
    "interfaces/actions/ISwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface ISwap {\n    function swap(\n        address token0Address,\n        address token1Address,\n        uint24 fee,\n        uint256 amount0In\n    ) external returns (uint256 amount1Out);\n}\n"
    },
    "contracts/actions/IncreaseLiquidity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '../helpers/ERC20Helper.sol';\nimport '../helpers/UniswapNFTHelper.sol';\nimport '../utils/Storage.sol';\nimport '../../interfaces/actions/IIncreaseLiquidity.sol';\n\n///@notice action to increase the liquidity of a V3 position\ncontract IncreaseLiquidity is IIncreaseLiquidity {\n    ///@notice emitted when liquidity is increased\n    ///@param positionManager address of the position manager which increased liquidity\n    ///@param tokenId id of the position\n    event LiquidityIncreased(address indexed positionManager, uint256 tokenId);\n\n    ///@notice increase the liquidity of a UniswapV3 position\n    ///@param tokenId the id of the position token\n    ///@param amount0Desired the desired amount of token0\n    ///@param amount1Desired the desired amount of token1\n    function increaseLiquidity(\n        uint256 tokenId,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    ) public override {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n\n        require(\n            amount0Desired > 0 || amount1Desired > 0,\n            'IncreaseLiquidity::increaseLiquidity: Amounts cannot be both zero'\n        );\n\n        (address token0Address, address token1Address, , , ) = UniswapNFTHelper._getTokens(\n            tokenId,\n            INonfungiblePositionManager(Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress())\n        );\n\n        ERC20Helper._approveToken(\n            token0Address,\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress(),\n            amount0Desired\n        );\n        ERC20Helper._approveToken(\n            token1Address,\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress(),\n            amount1Desired\n        );\n\n        INonfungiblePositionManager.IncreaseLiquidityParams memory params = INonfungiblePositionManager\n            .IncreaseLiquidityParams({\n                tokenId: tokenId,\n                amount0Desired: amount0Desired,\n                amount1Desired: amount1Desired,\n                amount0Min: 0,\n                amount1Min: 0,\n                deadline: block.timestamp + 120\n            });\n        INonfungiblePositionManager(Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()).increaseLiquidity(\n                params\n            );\n\n        emit LiquidityIncreased(address(this), tokenId);\n    }\n}\n"
    },
    "contracts/actions/Swap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\nimport '../helpers/ERC20Helper.sol';\nimport '../utils/Storage.sol';\nimport '../../interfaces/actions/ISwap.sol';\n\ncontract Swap is ISwap {\n    ///@notice emitted when a swap is performed\n    ///@param positionManager address of the position manager which performed the swap\n    ///@param tokenIn address of the token being swapped in\n    ///@param tokenOut address of the token being swapped out\n    ///@param amountIn amount of the token being swapped in\n    ///@param amountOut amount of the token being swapped out\n    event Swapped(\n        address indexed positionManager,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    ///@notice swaps token0 for token1 on uniswap\n    ///@param token0Address address of first token\n    ///@param token1Address address of second token\n    ///@param fee fee tier of the pool\n    ///@param amount0In amount of token0 to swap\n    function swap(\n        address token0Address,\n        address token1Address,\n        uint24 fee,\n        uint256 amount0In\n    ) public override returns (uint256 amount1Out) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        ISwapRouter swapRouter = ISwapRouter(Storage.uniswapAddressHolder.swapRouterAddress());\n\n        ERC20Helper._approveToken(token0Address, address(swapRouter), 2**256 - 1);\n        ERC20Helper._approveToken(token1Address, address(swapRouter), 2**256 - 1);\n\n        ISwapRouter.ExactInputSingleParams memory swapParams = ISwapRouter.ExactInputSingleParams({\n            tokenIn: token0Address,\n            tokenOut: token1Address,\n            fee: fee,\n            recipient: address(this),\n            deadline: block.timestamp + 120,\n            amountIn: amount0In,\n            amountOutMinimum: 0,\n            sqrtPriceLimitX96: 0\n        });\n\n        amount1Out = swapRouter.exactInputSingle(swapParams);\n        emit Swapped(address(this), token0Address, token1Address, amount0In, amount1Out);\n    }\n}\n"
    },
    "contracts/actions/CollectFees.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '../utils/Storage.sol';\nimport '../../interfaces/actions/ICollectFees.sol';\n\n///@notice collect fees from a uniswapV3 position\ncontract CollectFees is ICollectFees {\n    ///@notice emitted upon collect fees of a UniswapV3 position\n    ///@param positionManager address of the position manager which collected fees\n    ///@param tokenId id of the position\n    ///@param amount0 amount of token0 collected\n    ///@param amount1 amount of token1 collected\n    event FeesCollected(address indexed positionManager, uint256 tokenId, uint256 amount0, uint256 amount1);\n\n    ///@notice collect fees from a uniswapV3 position\n    ///@param tokenId of token to collect fees from\n    ///@param returnTokensToUser whether or not to return the collected fees to the user\n    ///@return amount0 of token0 collected\n    ///@return amount1 of token1 collected\n    function collectFees(uint256 tokenId, bool returnTokensToUser)\n        public\n        override\n        returns (uint256 amount0, uint256 amount1)\n    {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n\n        _updateUncollectedFees(tokenId);\n\n        INonfungiblePositionManager nonfungiblePositionManager = INonfungiblePositionManager(\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()\n        );\n        (, , , , , , , , , , uint128 feesToken0, uint128 feesToken1) = nonfungiblePositionManager.positions(tokenId);\n\n        INonfungiblePositionManager.CollectParams memory params = INonfungiblePositionManager.CollectParams({\n            tokenId: tokenId,\n            recipient: returnTokensToUser ? Storage.owner : address(this),\n            amount0Max: feesToken0,\n            amount1Max: feesToken1\n        });\n\n        (amount0, amount1) = nonfungiblePositionManager.collect(params);\n        emit FeesCollected(address(this), tokenId, amount0, amount1);\n    }\n\n    ///@notice update the uncollected fees of a uniswapV3 position\n    ///@param tokenId ID of the token to check fees from\n    function _updateUncollectedFees(uint256 tokenId) internal {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params = INonfungiblePositionManager\n            .DecreaseLiquidityParams({\n                tokenId: tokenId,\n                liquidity: 1,\n                amount0Min: 0,\n                amount1Min: 0,\n                deadline: block.timestamp + 120\n            });\n        INonfungiblePositionManager(Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()).decreaseLiquidity(\n                params\n            );\n    }\n}\n"
    },
    "contracts/actions/DecreaseLiquidity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol';\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '../helpers/UniswapNFTHelper.sol';\nimport '../utils/Storage.sol';\nimport '../../interfaces/actions/IDecreaseLiquidity.sol';\n\n///@notice action to decrease liquidity of an NFT position\ncontract DecreaseLiquidity is IDecreaseLiquidity {\n    ///@notice emitted when liquidity is decreased\n    ///@param positionManager address of the position manager which decreased liquidity\n    ///@param tokenId id of the position\n    event LiquidityDecreased(address indexed positionManager, uint256 tokenId);\n\n    ///@notice decrease the liquidity of a V3 position\n    ///@param tokenId the tokenId of the position\n    ///@param amount0Desired the amount of token0 liquidity desired\n    ///@param amount1Desired the amount of token1 liquidity desired\n    ///@return liquidityToDecrease the amount of liquidity to decrease\n    ///@return amount0 the amount of token0 removed\n    ///@return amount1 the amount of token1 removed\n    function decreaseLiquidity(\n        uint256 tokenId,\n        uint256 amount0Desired,\n        uint256 amount1Desired\n    )\n        public\n        override\n        returns (\n            uint128 liquidityToDecrease,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n\n        (, , , , , int24 tickLower, int24 tickUpper, uint128 liquidity, , , , ) = INonfungiblePositionManager(\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()\n        ).positions(tokenId);\n\n        IUniswapV3Pool pool = IUniswapV3Pool(\n            UniswapNFTHelper._getPoolFromTokenId(\n                tokenId,\n                INonfungiblePositionManager(Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()),\n                Storage.uniswapAddressHolder.uniswapV3FactoryAddress()\n            )\n        );\n\n        (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\n\n        liquidityToDecrease = LiquidityAmounts.getLiquidityForAmounts(\n            sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(tickLower),\n            TickMath.getSqrtRatioAtTick(tickUpper),\n            amount0Desired,\n            amount1Desired\n        );\n\n        ///@dev remove all liquidity if the amount to decrease is greater than the amount in the pool\n        if (liquidityToDecrease > liquidity) {\n            liquidityToDecrease = liquidity;\n        }\n\n        INonfungiblePositionManager.DecreaseLiquidityParams memory decreaseliquidityparams = INonfungiblePositionManager\n            .DecreaseLiquidityParams({\n                tokenId: tokenId,\n                liquidity: liquidityToDecrease,\n                amount0Min: 0,\n                amount1Min: 0,\n                deadline: block.timestamp + 120\n            });\n\n        (amount0, amount1) = INonfungiblePositionManager(\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()\n        ).decreaseLiquidity(decreaseliquidityparams);\n\n        emit LiquidityDecreased(address(this), tokenId);\n    }\n}\n"
    },
    "contracts/actions/AaveWithdraw.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '../../interfaces/IAToken.sol';\nimport '../../interfaces/ILendingPool.sol';\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/actions/IAaveWithdraw.sol';\nimport '../utils/Storage.sol';\n\n///@notice action to withdraw tokens from aave protocol\ncontract AaveWithdraw is IAaveWithdraw {\n    ///@notice emitted when a withdraw from aave is made\n    ///@param positionManager address of aave positionManager which withdrew\n    ///@param token token address\n    ///@param amount amount withdrawn\n    event WithdrawnFromAave(address indexed positionManager, address token, uint256 amount);\n\n    ///@notice withdraw from aave some token amount\n    ///@param token token address\n    ///@param id position to withdraw from\n    ///@return amountWithdrawn amount of token withdrawn from aave\n    function withdrawFromAave(address token, uint256 id) public override returns (uint256 amountWithdrawn) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        require(\n            Storage.aaveUserReserves[token].positionShares[id] > 0,\n            'PositionManager::removeAavePosition: no position to withdraw!'\n        );\n\n        uint256 amount = _getAmount(token, id);\n\n        amountWithdrawn = ILendingPool(Storage.aaveAddressHolder.lendingPoolAddress()).withdraw(\n            token,\n            amount,\n            address(this)\n        );\n\n        _removeAavePosition(token, id);\n        emit WithdrawnFromAave(address(this), token, amountWithdrawn);\n    }\n\n    function _getAmount(address token, uint256 id) internal view returns (uint256 amount) {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n        IAToken aToken = IAToken(\n            ILendingPool(PositionManagerStorage.getStorage().aaveAddressHolder.lendingPoolAddress())\n                .getReserveData(token)\n                .aTokenAddress\n        );\n\n        amount =\n            (aToken.balanceOf(address(this)) * Storage.aaveUserReserves[token].positionShares[id]) /\n            Storage.aaveUserReserves[token].sharesEmitted;\n    }\n\n    ///@notice remove awareness of aave position from positionManager\n    ///@param token address of token withdrawn\n    ///@param id of the withdrawn position\n    function _removeAavePosition(address token, uint256 id) internal {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n\n        Storage.aaveUserReserves[token].sharesEmitted -= Storage.aaveUserReserves[token].positionShares[id];\n        Storage.aaveUserReserves[token].positionShares[id] = 0;\n        Storage.aaveUserReserves[token].tokenIds[id] = 0;\n    }\n}\n"
    },
    "contracts/utils/AaveAddressHolder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\n\nimport '../../interfaces/IAaveAddressHolder.sol';\n\ncontract AaveAddressHolder is IAaveAddressHolder {\n    address public override lendingPoolAddress;\n\n    constructor(address _lendingPoolAddress) {\n        lendingPoolAddress = _lendingPoolAddress;\n    }\n\n    ///@notice Set the address of the lending pool from aave\n    ///@param newAddress The address of the lending pool from aave\n    function setLendingPoolAddress(address newAddress) external override {\n        lendingPoolAddress = newAddress;\n    }\n}\n"
    },
    "contracts/actions/ClosePosition.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol';\nimport '../utils/Storage.sol';\nimport '../../interfaces/IPositionManager.sol';\nimport '../../interfaces/IUniswapAddressHolder.sol';\nimport '../../interfaces/actions/IClosePosition.sol';\n\ncontract ClosePosition is IClosePosition {\n    ///@notice emitted when a UniswapNFT position is closed\n    ///@param positionManager address of PositionManager\n    ///@param tokenId Id of the closed token\n    event PositionClosed(address indexed positionManager, uint256 tokenId);\n\n    ///@notice close a UniswapV3 position NFT\n    ///@param tokenId id of the token to close\n    ///@param returnTokenToUser true if the token should be returned to the user\n    ///@return uint256 ID of the closed token\n    ///@return uint256 amount of token0 returned\n    ///@return uint256 amount of token1 returned\n    function closePosition(uint256 tokenId, bool returnTokenToUser)\n        public\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\n\n        INonfungiblePositionManager nonfungiblePositionManager = INonfungiblePositionManager(\n            Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()\n        );\n        (, , , , , , , uint128 liquidity, , , , ) = nonfungiblePositionManager.positions(tokenId);\n\n        INonfungiblePositionManager.DecreaseLiquidityParams memory decreaseliquidityparams = INonfungiblePositionManager\n            .DecreaseLiquidityParams({\n                tokenId: tokenId,\n                liquidity: liquidity,\n                amount0Min: 0,\n                amount1Min: 0,\n                deadline: block.timestamp + 120\n            });\n        nonfungiblePositionManager.decreaseLiquidity(decreaseliquidityparams);\n\n        (, , , , , , , , , , uint256 token0Closed, uint256 token1Closed) = nonfungiblePositionManager.positions(\n            tokenId\n        );\n\n        INonfungiblePositionManager.CollectParams memory collectparams = INonfungiblePositionManager.CollectParams({\n            tokenId: tokenId,\n            recipient: returnTokenToUser ? Storage.owner : address(this),\n            amount0Max: 2**128 - 1,\n            amount1Max: 2**128 - 1\n        });\n        nonfungiblePositionManager.collect(collectparams);\n\n        nonfungiblePositionManager.burn(tokenId);\n\n        //remove id from position manager array\n        IPositionManager(address(this)).removePositionId(tokenId);\n\n        //delete the position from the position manager\n        emit PositionClosed(address(this), tokenId);\n\n        //return the tokenId and tokens closed\n        return (tokenId, token0Closed, token1Closed);\n    }\n}\n"
    },
    "contracts/test/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract MockToken is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals\n    ) ERC20(name, symbol) {\n        _setupDecimals(decimals);\n    }\n\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n}\n"
    },
    "contracts/Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport '../interfaces/IRegistry.sol';\n\n/// @title Stores all the modules addresses\ncontract Registry is IRegistry {\n    address public override governance;\n    address public override positionManagerFactoryAddress;\n\n    mapping(bytes32 => Entry) public modules;\n    bytes32[] public moduleKeys;\n\n    ///@notice emitted when governance address is changed\n    ///@param newGovernance the new governance address\n    event GovernanceChanged(address newGovernance);\n\n    ///@notice emitted when a contract is added to registry\n    ///@param newContract address of the new contract\n    ///@param moduleId keccak of module name\n    event ContractCreated(address newContract, bytes32 moduleId);\n\n    ///@notice emitted when a contract address is updated\n    ///@param oldContract address of the contract before update\n    ///@param newContract address of the contract after update\n    ///@param moduleId keccak of module name\n    event ContractChanged(address oldContract, address newContract, bytes32 moduleId);\n\n    ///@notice emitted when a module is switched on/off\n    ///@param moduleId keccak of module name\n    ///@param isActive true if module is switched on, false otherwise\n    event ModuleSwitched(bytes32 moduleId, bool isActive);\n\n    constructor(address _governance) {\n        governance = _governance;\n    }\n\n    ///@notice sets the Position manager factory address\n    ///@param _positionManagerFactory the address of the position manager factory\n    function setPositionManagerFactory(address _positionManagerFactory) external onlyGovernance {\n        positionManagerFactoryAddress = _positionManagerFactory;\n    }\n\n    ///@notice change the address of the governance\n    ///@param _governance the address of the new governance\n    function changeGovernance(address _governance) external onlyGovernance {\n        governance = _governance;\n        emit GovernanceChanged(_governance);\n    }\n\n    ///@notice Register a module\n    ///@param _id keccak256 of module id string\n    ///@param _contractAddress address of the new module\n    function addNewContract(bytes32 _id, address _contractAddress) external onlyGovernance {\n        require(modules[_id].contractAddress == address(0), 'Registry::addNewContract: Entry already exists.');\n        modules[_id] = Entry({contractAddress: _contractAddress, activated: true});\n        moduleKeys.push(_id);\n        emit ContractCreated(_contractAddress, _id);\n    }\n\n    ///@notice Changes a module's address\n    ///@param _id keccak256 of module id string\n    ///@param _newContractAddress address of the new module\n    function changeContract(bytes32 _id, address _newContractAddress) external onlyGovernance {\n        require(modules[_id].contractAddress != address(0), 'Registry::changeContract: Entry does not exist.');\n        //Begin timelock\n        emit ContractChanged(modules[_id].contractAddress, _newContractAddress, _id);\n        modules[_id].contractAddress = _newContractAddress;\n    }\n\n    ///@notice Toggle global state of a module\n    ///@param _id keccak256 of module id string\n    ///@param _activated boolean to activate or deactivate module\n    function switchModuleState(bytes32 _id, bool _activated) external onlyGovernance {\n        require(modules[_id].contractAddress != address(0), 'Registry::switchModuleState: Entry does not exist.');\n        modules[_id].activated = _activated;\n        emit ModuleSwitched(_id, _activated);\n    }\n\n    ///@notice Get the keys for all modules\n    ///@return bytes32[] all module keys\n    function getModuleKeys() external view override returns (bytes32[] memory) {\n        return moduleKeys;\n    }\n\n    ///@notice Get the address of a module for a given key\n    ///@param _id keccak256 of module id string\n    ///@return address of the module\n    function moduleAddress(bytes32 _id) external view override returns (address) {\n        return modules[_id].contractAddress;\n    }\n\n    ///@notice Get the state of a module\n    ///@param _id keccak256 of module id string\n    ///@return bool activated\n    function isActive(bytes32 _id) public view override returns (bool) {\n        return modules[_id].activated;\n    }\n\n    ///@notice modifier to check if the sender is the governance contract\n    modifier onlyGovernance() {\n        require(msg.sender == governance, 'Registry::onlyGovernance: Call must come from governance.');\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}